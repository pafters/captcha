{"version":3,"sources":["../../src/components/slider/CaptchaSlider.js","../../src/components/captchaInput/CaptchaInput.js","../../src/components/captchaSubmitBttn/CaptchaSubmitBttn.js","../../src/components/updateCaptchaBttn/UpdateCaptchaBttn.js","../../src/captchaes/textCaptcha/TextCaptcha.js","../../src/conf.js","../../src/modules/CaptchaBaseModule.js","../../src/captchaes/deadCaptcha/DeadCaptcha.js","../../src/components/captchaExitBttn/CaptchaExitBttn.js","../../src/captchaes/mathCaptcha/MathCaptcha.js","../../src/components/captchaToSpeech/CaptchaToSpeech.js","../../src/captchaes/audioCaptcha/AudioCaptcha.js","../../src/captchaes/graphCaptcha/GraphCaptcha.js","../../src/captchaes/animeCaptcha/AnimeCaptcha.js","../../src/components/captchaManager/CaptchaManager.js","App.js","../../src/modules/showCaptchaBttn/CaptchaProps.js","index.js"],"names":["CaptchaSlider","isDesktop","updateCaptchaData","updateCaptchaIndex","captchas","captchaIndex","useState","width","setWidth","failedCounts","updateFailedCounts","checkRangePosition","React","className","styles","captchaSliderDesktop","captchaSlider","captchaSliderPortrait","type","onChange","event","target","value","onMouseUp","onTouchEnd","min","max","length","step","CaptchaInput","cbm","updateCaptchaValue","updateCaptchaToken","updateInputRef","captchaIDs","captchaValue","updateCaptchaIsActive","audioStop","updErrCounts","errCounts","captchaType","captchaInpRef","useRef","submitValue","checkCaptcha","code","index","answer","captchaToken","useEffect","ref","onKeyUp","key","current","placeholder","CaptchaSubmitBttn","inputRef","updateActiveStates","onClick","UpdateCaptchaBttn","rerunCounts","updateRerunCounts","TextCaptcha","captchaIsActive","updateCaptchas","getCaptcha","src","body","captchaID","CONFIG","CaptchaBaseModule","request","props","axios","post","response","data","Error","error","message","get","this","postRequest","getRequest","req","DeadCaptcha","CaptchaExitBttn","CaptchaToSpeech","audioPlay","AudioCaptcha","noticeIsActive","updateNoticeState","audioPlayer","isUpd","setTimeout","pause","currentTime","play","GraphCaptcha","activeCaptchasIndex","updActiveCapthasIndex","activeCaptchas","updActiveCapthas","activeStates","map","captcha","indexCaptcha","indexOf","newActiveStates","filter","elem","item","i","changeCaptchaState","style","content","AnimeCaptcha","standard","updStandard","switchImage","state","background","CaptchaManager","screenStatus","window","innerWidth","innerHeight","updateIsDesktop","serverIsLiving","updateServerStatus","fetchObj","getServerStatus","onresize","MathCaptcha","Fragment","App","_useState","_useState2","_slicedToArray","updateCaptchaType","_CaptchaProps","CaptchaProps","showCaptcha","createElement","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52988378.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport React from 'react';\r\nimport styles from './captchaSlider.css';\r\n\r\nexport default function CaptchaSlider({ isDesktop, updateCaptchaData, updateCaptchaIndex, captchas, captchaIndex }) {\r\n\r\n    const [width, setWidth] = useState(0);\r\n\r\n    const [failedCounts, updateFailedCounts] = useState(0);\r\n\r\n    const changeWidth = (event) => {\r\n        setWidth(event.target.value);\r\n        updateCaptchaIndex(event.target.value / 20);\r\n    };\r\n\r\n    function checkRangePosition() {\r\n        updateFailedCounts(failedCounts + 1);\r\n        if (failedCounts == 4) {\r\n            updateFailedCounts(0);\r\n            updateCaptchaData();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {captchas &&\r\n                <input\r\n                    className={isDesktop ? styles.captchaSliderDesktop + ' ' + styles.captchaSlider :\r\n                        styles.captchaSliderPortrait + ' ' + styles.captchaSlider}\r\n                    type=\"range\"\r\n                    onChange={changeWidth}\r\n                    onMouseUp={() => checkRangePosition()}\r\n                    onTouchEnd={() => checkRangePosition()}\r\n                    min={0}\r\n                    max={(captchas.length - 1) * 20}\r\n                    step={20}\r\n                    value={width}\r\n                />\r\n            }\r\n\r\n            {/* <p>{width}</p> */}\r\n        </div>\r\n    );\r\n}\r\n","import { useEffect, useRef } from 'react';\r\nimport React from 'react';\r\n\r\nimport styles from './captchaInput.css';\r\n\r\nexport default function CaptchaInput({ isDesktop, cbm, updateCaptchaValue, updateCaptchaToken,\r\n    updateInputRef, captchaIDs, captchaValue,\r\n    updateCaptchaIsActive, updateCaptchaData, audioStop, updErrCounts, errCounts, captchaIndex,\r\n    captchaType }) {\r\n    const captchaInpRef = useRef();\r\n\r\n    useEffect(() => {\r\n        updateInputRef(captchaInpRef);\r\n    }, [])\r\n\r\n    async function submitValue() {\r\n        try {\r\n            const answer = await cbm.checkCaptcha({ code: captchaValue, captchaIDs: captchaIDs, index: captchaIndex, type: captchaType });\r\n            if (answer) {\r\n                updateCaptchaToken(answer.captchaToken);\r\n                updateCaptchaIsActive(false);\r\n                if (audioStop)\r\n                    audioStop();\r\n            }\r\n        } catch (err) {\r\n            updateCaptchaData(true);\r\n            if (audioStop)\r\n                audioStop();\r\n            updErrCounts(errCounts + 1);\r\n            if (errCounts == 5) {\r\n                updErrCounts(0);\r\n                updateCaptchaToken(false);\r\n                updateCaptchaIsActive(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <input ref={captchaInpRef} onKeyUp={(event) => {\r\n            if (event.key == 'Enter') {\r\n                captchaInpRef.current.value = '';\r\n                submitValue();\r\n            }\r\n        }} onChange={() => updateCaptchaValue(captchaInpRef.current.value)}\r\n            className={isDesktop ? styles.captchaInputDesktop : styles.captchaInputPortrait} placeholder=\"Ваш ответ\" />\r\n    );\r\n}","\r\nimport styles from './captchaSubmitBttn.css';\r\nimport React from 'react';\r\n\r\nexport default function CaptchaSubmitBttn({ isDesktop, captchaValue, cbm,\r\n    captchaIDs, updateCaptchaToken, updateCaptchaIsActive, updateCaptchaData, inputRef,\r\n    audioStop, updErrCounts, errCounts, captchaIndex, updateActiveStates, captchaType,\r\n    updateCaptchaIndex }) {\r\n\r\n    async function submitValue() {\r\n        if (inputRef)\r\n            inputRef.current.value = '';\r\n        try {\r\n            if (updateActiveStates) {\r\n                updateActiveStates([\r\n                    false, false, false,\r\n                    false, false, false,\r\n                    false, false, false,\r\n                ])\r\n            }\r\n            const answer = await cbm.checkCaptcha({ code: captchaValue, captchaIDs: captchaIDs, index: captchaIndex, type: captchaType });\r\n            if (answer) {\r\n                updateCaptchaToken(answer.captchaToken);\r\n                updateCaptchaIsActive(false);\r\n                if (audioStop)\r\n                    audioStop();\r\n            }\r\n        } catch (err) {\r\n            updateCaptchaData(true);\r\n            if (updateCaptchaIndex)\r\n                updateCaptchaIndex(1)\r\n            if (audioStop)\r\n                audioStop();\r\n            updErrCounts(errCounts + 1);\r\n            if (errCounts == 5) {\r\n                updErrCounts(0);\r\n                updateCaptchaToken(false);\r\n                updateCaptchaIsActive(false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <button onClick={submitValue} className={isDesktop ? styles.captchaSubmitBttnDesktop + ' ' + styles.captchaSubmitBttn + ' ' + styles.noselect\r\n            : styles.captchaSubmitBttnPortrait + ' ' + styles.captchaSubmitBttn + ' ' + styles.noselect}>Отправить</button>\r\n    );\r\n}","import React from \"react\";\r\nimport { useState } from 'react';\r\n\r\nimport styles from './updateCaptchaBttn.css';\r\n\r\nexport default function UpdateCaptchaBttn({ updateCaptchaData, isDesktop, audioStop, updateCaptchaToken,\r\n    updateCaptchaIsActive, updateCaptchaIndex\r\n}) {\r\n    const [rerunCounts, updateRerunCounts] = useState(0);\r\n\r\n    return (\r\n        <div >\r\n            <div\r\n                onClick={() => {\r\n                    updateRerunCounts(rerunCounts + 1);\r\n                    if (rerunCounts == 5) {\r\n                        if (updateCaptchaIndex)\r\n                            updateCaptchaIndex(1);\r\n                        updateRerunCounts(0);\r\n                        updateCaptchaToken(false);\r\n                        updateCaptchaIsActive(false);\r\n                    } else {\r\n                        if (audioStop)\r\n                            audioStop();\r\n                        updateCaptchaData(true);\r\n                    }\r\n                }}\r\n                className={isDesktop ? styles.updateCaptchaBttnDesktop : styles.updateCaptchaBttnPortrait} />\r\n        </div>\r\n    );\r\n}","import { useEffect, useState } from 'react';\r\nimport React from 'react'\r\n\r\nimport CaptchaSlider from '../../components/slider/CaptchaSlider';\r\nimport CaptchaInput from '../../components/captchaInput/CaptchaInput';\r\nimport CaptchaSubmitBttn from '../../components/captchaSubmitBttn/CaptchaSubmitBttn';\r\nimport UpdateCaptchaBttn from '../../components/updateCaptchaBttn/UpdateCaptchaBttn';\r\n\r\nimport styles from './textCaptcha.css';\r\n\r\nexport default function TextCaptcha({ cbm, updateCaptchaIsActive, updateInputRef,\r\n    inputRef, isDesktop, captchaValue, updateCaptchaValue, updateCaptchaToken, captchaIsActive,\r\n    captchaType\r\n}) {\r\n    const [errCounts, updErrCounts] = useState(0);\r\n\r\n    const [captchas, updateCaptchas] = useState('');\r\n    const [captchaIndex, updateCaptchaIndex] = useState(0);\r\n\r\n    useEffect(() => {\r\n        updateCaptchaData();\r\n        updateCaptchaToken(false);\r\n    }, []);\r\n\r\n    async function updateCaptchaData() {\r\n        if (captchaIsActive) {\r\n            const answer = await cbm.getCaptcha('TEXT');\r\n            if (answer) {\r\n                updateCaptchas(answer.captchas);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <img\r\n                className={styles.captchaImg}\r\n                src={captchas[captchaIndex]?.body}\r\n            />\r\n            <div >\r\n                <CaptchaSlider isDesktop={isDesktop}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    captchas={captchas}\r\n                    updateCaptchaIndex={updateCaptchaIndex} />\r\n            </div>\r\n            <div className={styles.captchaBttnsContainer}>\r\n                <UpdateCaptchaBttn\r\n                    updateCaptchaIndex={updateCaptchaIndex} updateCaptchaData={updateCaptchaData}\r\n                    isDesktop={isDesktop}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                />\r\n            </div>\r\n            <div className={styles.unswerContainer}>\r\n                <CaptchaInput isDesktop={isDesktop} updateCaptchaValue={updateCaptchaValue}\r\n                    cbm={cbm} captchaIDs={[captchas[captchaIndex]?.captchaID]}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    updateInputRef={updateInputRef}\r\n                    updateCaptchaIndex={updateCaptchaIndex}\r\n                    captchaValue={captchaValue}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    captchaType={captchaType}\r\n                />\r\n                <CaptchaSubmitBttn isDesktop={isDesktop} captchaValue={captchaValue}\r\n                    cbm={cbm} captchaIDs={[captchas[captchaIndex]?.captchaID]}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    updateCaptchaIndex={updateCaptchaIndex}\r\n                    inputRef={inputRef}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    captchaType={captchaType}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n","\r\nconst CONFIG = { BACKEND_API: `https://captcha.sixhands.co` }//`http://localhost:24070/` };\r\n\r\nexport default CONFIG;","import axios from 'axios';\r\nimport CONFIG from '../conf';\r\nclass CaptchaBaseModule {\r\n\r\n    async postRequest(request, props = null, headers) {\r\n        try {\r\n            const response = await axios.post(`${CONFIG.BACKEND_API}/${request}`, props);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error(`Error getting data from API: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    async getRequest(request, props = null) {\r\n        try {\r\n            const response = await axios.get(`${CONFIG.BACKEND_API}/${request}`, props);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error(`Error getting data from API: ${error.message}`);\r\n        }\r\n    }\r\n\r\n\r\n    async getCaptcha(type) {\r\n        const answer = await this.postRequest(`captchas`, { type: type, });\r\n        if (answer) return answer;\r\n    }\r\n\r\n    async getServerStatus() {\r\n        const answer = await this.getRequest(`health`);\r\n        if (answer) return answer;\r\n    }\r\n\r\n    async checkCaptcha(req) {\r\n        let answer = null;\r\n        if (req.index)\r\n            answer = await this.postRequest(`captchas/check`, req, true);\r\n        else\r\n            answer = await this.postRequest(`captchas/check`, req, true);\r\n        if (answer) return answer;\r\n    }\r\n\r\n\r\n\r\n    // async post(endpoint, data = {}) {\r\n    //     try {\r\n    //         const response = await axios.post(`${this.baseUrl}/${endpoint}`, data);\r\n    //         return response.data;\r\n    //     } catch (error) {\r\n    //         throw new Error(`Error posting data to API: ${error.message}`);\r\n    //     }\r\n    // }\r\n\r\n    // Добавьте другие методы, такие как put(), delete() и т.д., если нужно.\r\n\r\n}\r\n\r\nexport default CaptchaBaseModule;\r\n\r\n","import React from \"react\";\r\n\r\nimport styles from \"./deadCaptcha.css\";\r\n\r\nexport default function DeadCaptcha({ isDesktop }) {\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.serverStatus}></div>\r\n            <span className={isDesktop ? styles.captchaStatusNotificationdDesktop : styles.captchaStatusNotificationdPortrait}>Сервер спит</span>\r\n        </div>\r\n    );\r\n} ","import React from 'react';\r\n\r\nimport styles from './captchaExitBttn.css';\r\n\r\nexport default function CaptchaExitBttn({ isDesktop, updateCaptchaIsActive }) {\r\n\r\n    function leftCaptchaContainer() {\r\n        updateCaptchaIsActive(false);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.captachaExitContainer + ' ' + styles.noselect}>\r\n            <img\r\n                onClick={leftCaptchaContainer}\r\n                className={isDesktop ? styles.captchaExitBttnDesktop\r\n                    : styles.captchaExitBttnPortrait}\r\n            />\r\n        </div>\r\n    );\r\n}","import { useEffect, useState } from 'react';\r\nimport React from 'react'\r\n\r\nimport CaptchaSlider from '../../components/slider/CaptchaSlider';\r\nimport CaptchaInput from '../../components/captchaInput/CaptchaInput';\r\nimport CaptchaSubmitBttn from '../../components/captchaSubmitBttn/CaptchaSubmitBttn';\r\nimport UpdateCaptchaBttn from '../../components/updateCaptchaBttn/UpdateCaptchaBttn';\r\n\r\nimport styles from './mathCaptcha.css';\r\n\r\nexport default function TextCaptcha({ cbm, updateCaptchaIsActive, updateInputRef,\r\n    inputRef, isDesktop, captchaValue, updateCaptchaValue, updateCaptchaToken,\r\n    captchaType\r\n}) {\r\n    const [errCounts, updErrCounts] = useState(0);\r\n\r\n    const [captchas, updateCaptchas] = useState('');\r\n    const [captchaIndex, updateCaptchaIndex] = useState(0);\r\n\r\n    useEffect(() => {\r\n        updateCaptchaData();\r\n        updateCaptchaToken(false);\r\n    }, []);\r\n\r\n    async function updateCaptchaData() {\r\n        const answer = await cbm.getCaptcha('MATH');\r\n        if (answer) {\r\n            updateCaptchas(answer.captchas);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <img\r\n                className={styles.captchaImg}\r\n                src={captchas[captchaIndex]?.body}\r\n            />\r\n            <div >\r\n                <CaptchaSlider isDesktop={isDesktop}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaIndex={updateCaptchaIndex}\r\n                    captchas={captchas} />\r\n\r\n            </div>\r\n            <div className={styles.captchaBttnsContainer}>\r\n                <UpdateCaptchaBttn\r\n                    updateCaptchaIndex={updateCaptchaIndex} updateCaptchaData={updateCaptchaData}\r\n                    isDesktop={isDesktop}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                />\r\n            </div>\r\n            <div className={styles.unswerContainer}>\r\n                <CaptchaInput isDesktop={isDesktop} updateCaptchaValue={updateCaptchaValue}\r\n                    cbm={cbm} captchaIDs={[captchas[captchaIndex]?.captchaID]}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    updateInputRef={updateInputRef}\r\n                    updateCaptchaIndex={updateCaptchaIndex}\r\n                    captchaValue={captchaValue}\r\n                    captchaIndex={captchaIndex}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    captchaType={captchaType}\r\n                />\r\n                <CaptchaSubmitBttn isDesktop={isDesktop} captchaValue={captchaValue}\r\n                    cbm={cbm} captchaIDs={[captchas[captchaIndex]?.captchaID]}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    updateCaptchaIndex={updateCaptchaIndex}\r\n                    inputRef={inputRef}\r\n                    captchaIndex={captchaIndex}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    captchaType={captchaType}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport styles from './captchaToSpeech.css';\r\n\r\nexport default function CaptchaToSpeech({ audioPlay, isDesktop }) {\r\n\r\n    return (\r\n        <div className={isDesktop ? styles.captchaToSpeechBttnDesktop : styles.captchaToSpeechBttnPortrait} onClick={() => audioPlay()}></div>\r\n    );\r\n}","import { useEffect, useRef, useState } from 'react';\r\nimport React from 'react'\r\n\r\nimport styles from './audioCaptcha.css';\r\nimport CaptchaInput from '../../components/captchaInput/CaptchaInput';\r\nimport CaptchaSubmitBttn from '../../components/captchaSubmitBttn/CaptchaSubmitBttn';\r\nimport CaptchaToSpeech from '../../components/captchaToSpeech/CaptchaToSpeech';\r\nimport UpdateCaptchaBttn from '../../components/updateCaptchaBttn/UpdateCaptchaBttn';\r\n\r\nexport default function AudioCaptcha({ cbm, updateCaptchaIsActive, updateInputRef,\r\n    inputRef, isDesktop, captchaValue, updateCaptchaValue, updateCaptchaToken,\r\n    captchaType\r\n}) {\r\n\r\n    const [captchas, updateCaptchas] = useState('');\r\n    const [noticeIsActive, updateNoticeState] = useState(false);\r\n    const [errCounts, updErrCounts] = useState(0);\r\n    const audioPlayer = useRef();\r\n\r\n    useEffect(() => {\r\n        updateCaptchaData();\r\n        updateCaptchaToken(false);\r\n\r\n    }, []);\r\n\r\n    async function updateCaptchaData(isUpd) {\r\n        const answer = await cbm.getCaptcha('AUDIO');\r\n        if (answer) {\r\n            updateCaptchas(answer.captchas[0]);\r\n            if (isUpd) {\r\n                if (!noticeIsActive) {\r\n                    updateNoticeState(true);\r\n                    setTimeout(() => updateNoticeState(false), 1000)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function audioStop() {\r\n        if (audioPlayer?.current) {\r\n            audioPlayer.current.pause();\r\n            audioPlayer.current.currentTime = 0;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function audioPlay() {\r\n        if (audioPlayer?.current) {\r\n            audioPlayer.current.play();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <audio\r\n                src={captchas.body}\r\n                ref={audioPlayer}\r\n            // onTimeUpdate={onPlaying}\r\n            ></audio>\r\n            <div className={styles.captchaBttnsContainer}>\r\n                <div className={styles.captchaBttn}>\r\n                    <UpdateCaptchaBttn\r\n                        isDesktop={isDesktop}\r\n                        audioPlayer={audioPlayer}\r\n                        updateCaptchaData={updateCaptchaData}\r\n                        audioStop={audioStop}\r\n                    />\r\n                </div>\r\n                <div className={styles.captchaBttn + ' ' + styles.captchaSpeechBttn}>\r\n                    <CaptchaToSpeech audioPlay={audioPlay} isDesktop={isDesktop} />\r\n                </div>\r\n            </div>\r\n            <span className={isDesktop ? styles.updNoticeDesk\r\n                : styles.updNoticePort}>{noticeIsActive ? 'Капча успешно обновлена!' : 'Прослушайте капчу'}</span>\r\n            <div className={styles.unswerContainer}>\r\n                <CaptchaInput isDesktop={isDesktop} updateCaptchaValue={updateCaptchaValue}\r\n                    cbm={cbm} captchaIDs={[captchas?.captchaID]}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    updateInputRef={updateInputRef}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    audioStop={audioStop}\r\n                    captchaType={captchaType}\r\n                    captchaValue={captchaValue}\r\n                />\r\n                <CaptchaSubmitBttn isDesktop={isDesktop} captchaValue={captchaValue}\r\n                    cbm={cbm} captchaIDs={[captchas?.captchaID]}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    inputRef={inputRef}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    audioStop={audioStop}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import { useEffect, useState, createRef } from 'react';\r\nimport React from 'react'\r\n\r\n// import CaptchaSlider from '../../components/slider/CaptchaSlider';\r\n// import CaptchaInput from '../../components/captchaInput/CaptchaInput';\r\nimport CaptchaSubmitBttn from '../../components/captchaSubmitBttn/CaptchaSubmitBttn';\r\nimport UpdateCaptchaBttn from '../../components/updateCaptchaBttn/UpdateCaptchaBttn';\r\n\r\nimport styles from './graphCaptcha.css';\r\n\r\nexport default function GraphCaptcha({ cbm, updateCaptchaIsActive, updateInputRef,\r\n    inputRef, isDesktop, captchaValue, updateCaptchaValue, updateCaptchaToken,\r\n    captchaType\r\n}) {\r\n    const [errCounts, updErrCounts] = useState(0);\r\n    const [captchas, updateCaptchas] = useState([]);\r\n    const [captchaIndex, updateCaptchaIndex] = useState(0);\r\n    const [activeCaptchasIndex, updActiveCapthasIndex] = useState([]);\r\n    const [activeCaptchas, updActiveCapthas] = useState([]);\r\n    const [activeStates, updateActiveStates] = useState([\r\n        false, false, false,\r\n        false, false, false,\r\n        false, false, false,\r\n    ]);\r\n\r\n    const [noticeIsActive, updateNoticeState] = useState(true);\r\n\r\n    useEffect(() => {\r\n        updateCaptchaData();\r\n        updateCaptchaToken(false);\r\n    }, []);\r\n\r\n    async function updateCaptchaData(isUpd) {\r\n        updateNoticeState(true);\r\n        updActiveCapthas([]);\r\n        const answer = await cbm.getCaptcha('GRAPH');\r\n        if (answer) {\r\n            updateCaptchas(answer.captchas);\r\n            updateNoticeState(false);\r\n            //setTimeout(() => updateNoticeState(false), 1000)\r\n        }\r\n    }\r\n\r\n    function changeCaptchaState(index) {\r\n        const indexCaptcha = activeCaptchasIndex.indexOf(index)\r\n        const newActiveStates = [...activeStates];\r\n        if (indexCaptcha >= 0) {\r\n            updActiveCapthasIndex([...activeCaptchasIndex].filter(function (elem) {\r\n                return elem !== index\r\n            }));\r\n\r\n            updActiveCapthas([...activeCaptchas].filter((item, i) => {\r\n                return captchas[index].captchaID !== item\r\n            }))\r\n            newActiveStates[index] = false;\r\n            updateActiveStates(newActiveStates);\r\n        } else {\r\n            updActiveCapthasIndex([...activeCaptchasIndex, index]);\r\n            updActiveCapthas([...activeCaptchas, captchas[index].captchaID])\r\n            newActiveStates[index] = true;\r\n            updateActiveStates(newActiveStates);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <div className={styles.container}>\r\n                <div className={isDesktop ? styles.captchaContainer + ' ' + styles.gripGadDesktop : styles.captchaContainer + ' ' + styles.gripGadPortrait}>\r\n                    {captchas.map((captcha, index) =>\r\n                        <div onClick={() => { changeCaptchaState(index) }} key={index}\r\n                            className={(isDesktop ? styles.captchaDesktop + ' ' + (activeStates[index] ? styles.elemActiveDesktop : '')\r\n                                : styles.captchaPortrait + ' ' + (activeStates[index] ? styles.elemActivePortrait : ''))}\r\n                            style={{ content: `url(${captcha?.body})` }}\r\n                        ></div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <p className={isDesktop ? styles.updNoticeDesk\r\n                : styles.updNoticePort}>{noticeIsActive ? 'Получаем новую капчу...' : 'Выберите все одинаковые изображения'}</p>\r\n            <div className={styles.captchaBttnsContainer}>\r\n                <UpdateCaptchaBttn\r\n                    updateCaptchaIndex={updateCaptchaIndex} updateCaptchaData={updateCaptchaData}\r\n                    isDesktop={isDesktop}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                />\r\n            </div>\r\n            <div className={styles.unswerContainer}>\r\n                <CaptchaSubmitBttn isDesktop={isDesktop} captchaValue={captchaValue}\r\n                    cbm={cbm} captchaIDs={activeCaptchas}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    updateCaptchaIndex={updateCaptchaIndex}\r\n                    inputRef={inputRef}\r\n                    captchaIndex={captchaIndex}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    captchaType={captchaType}\r\n                    updateActiveStates={updateActiveStates}\r\n                />\r\n            </div>\r\n\r\n        </div >\r\n    );\r\n}\r\n","import { useEffect, useState, createRef } from 'react';\r\nimport React from 'react'\r\n\r\nimport CaptchaSubmitBttn from '../../components/captchaSubmitBttn/CaptchaSubmitBttn';\r\nimport UpdateCaptchaBttn from '../../components/updateCaptchaBttn/UpdateCaptchaBttn';\r\n\r\nimport styles from './animeCaptcha.css';\r\n\r\nexport default function AnimeCaptcha({ cbm, updateCaptchaIsActive, updateInputRef,\r\n    inputRef, isDesktop, captchaValue, updateCaptchaValue, updateCaptchaToken,\r\n    captchaType\r\n}) {\r\n    const [errCounts, updErrCounts] = useState(0);\r\n    const [captchas, updateCaptchas] = useState([]);\r\n    const [standard, updStandard] = useState({});\r\n\r\n    const [captchaIndex, updateCaptchaIndex] = useState(1);\r\n\r\n    const [noticeIsActive, updateNoticeState] = useState(true);\r\n\r\n    useEffect(() => {\r\n        updateCaptchaData();\r\n        updateCaptchaToken(false);\r\n    }, []);\r\n\r\n    async function updateCaptchaData(isUpd) {\r\n        updateNoticeState(true);\r\n        const answer = await cbm.getCaptcha('ANIME');\r\n        if (answer) {\r\n            updateCaptchas(answer.captchas); // .filter((element, index) => index !== 0)\r\n            updStandard(answer.captchas[0]);\r\n            updateNoticeState(false);\r\n        }\r\n    }\r\n\r\n    const switchImage = (state) => {\r\n        let index = captchaIndex + state;\r\n        if (index < 1)\r\n            index = captchas.length - 1;\r\n        else if (index > captchas.length - 1)\r\n            index = 1;\r\n        updateCaptchaIndex(index);\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            {!noticeIsActive && <div className={styles.container + ' ' + styles.noselect}>\r\n                <div className={isDesktop ? styles.captchaContainer + ' ' + styles.gripGadDesktop : styles.captchaContainer + ' ' + styles.gripGadPortrait}>\r\n                    <div\r\n                        className={(isDesktop ? styles.captchaDesktop : styles.captchaPortrait)}\r\n                        style={{ content: `url(${standard?.body})` }}\r\n                    />\r\n\r\n                    <div\r\n                        className={(isDesktop ? styles.captchaDesktop : styles.captchaPortrait)}\r\n                        style={{ background: `url(${captchas[captchaIndex]?.body}) no-repeat center center / cover` }}\r\n                    >\r\n                        <div\r\n                            onClick={() => switchImage(-1)}\r\n                            className={isDesktop ? styles.switchButtonDesktop + ' ' + styles.leftButtonDesktop\r\n                                : styles.switchButtonPortrait + ' ' + styles.leftButtonPortrait} />\r\n                        <div\r\n                            onClick={() => switchImage(1)}\r\n                            className={isDesktop ? styles.switchButtonDesktop + ' ' + styles.rightButtonDesktop\r\n                                : styles.switchButtonPortrait + ' ' + styles.rightButtonPortrait} />\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n            <p className={isDesktop ? styles.updNoticeDesk + ' ' + styles.noselect\r\n                : styles.updNoticePort + ' ' + styles.noselect}>{noticeIsActive ? 'Получаем новую капчу...' : 'Приведите в одинаковое положение'}</p>\r\n            <div className={styles.captchaBttnsContainer + ' ' + styles.noselect}>\r\n                <UpdateCaptchaBttn\r\n                    updateCaptchaIndex={updateCaptchaIndex} updateCaptchaData={updateCaptchaData}\r\n                    isDesktop={isDesktop}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                />\r\n            </div>\r\n            <div className={styles.unswerContainer + ' ' + styles.noselect}>\r\n                <CaptchaSubmitBttn isDesktop={isDesktop} captchaValue={captchaValue}\r\n                    cbm={cbm} captchaIDs={[captchas[captchaIndex]?.captchaID]}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    updateCaptchaIndex={updateCaptchaIndex}\r\n                    inputRef={inputRef}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    captchaType={captchaType}\r\n                />\r\n            </div>\r\n\r\n        </div >\r\n    );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport React, { Fragment } from \"react\";\r\n\r\nimport TextCaptcha from \"../../captchaes/textCaptcha/TextCaptcha\";\r\nimport CaptchaBaseModule from \"../../modules/CaptchaBaseModule\";\r\n\r\nimport styles from './captchaManager.css';\r\nimport DeadCaptcha from \"../../captchaes/deadCaptcha/DeadCaptcha\";\r\n\r\nimport CaptchaExitBttn from \"../captchaExitBttn/CaptchaExitBttn\";\r\nimport MathCaptcha from \"../../captchaes/mathCaptcha/MathCaptcha\";\r\nimport AudioCaptcha from \"../../captchaes/audioCaptcha/AudioCaptcha\";\r\nimport GraphCaptcha from \"../../captchaes/graphCaptcha/GraphCaptcha\";\r\nimport AnimeCaptcha from \"../../captchaes/animeCaptcha/AnimeCaptcha\";\r\n\r\n\r\nexport { TextCaptcha, DeadCaptcha, MathCaptcha, AudioCaptcha }\r\n\r\n\r\nexport default function CaptchaManager({ updateCaptchaIsActive, captchaIsActive, updateCaptchaToken, captchaType }) {\r\n    function screenStatus() {\r\n        return window.innerWidth > window.innerHeight ? true : false;\r\n    }\r\n\r\n    const cbm = new CaptchaBaseModule();\r\n\r\n    const [isDesktop, updateIsDesktop] = useState(screenStatus());\r\n\r\n    const [captchaValue, updateCaptchaValue] = useState('');\r\n    const [inputRef, updateInputRef] = useState(null);\r\n    const [serverIsLiving, updateServerStatus] = useState(false);\r\n\r\n    useEffect(() => {\r\n        async function fetchObj() {\r\n            const answer = await cbm.getServerStatus();\r\n            if (answer) {\r\n                // updateServerStatus(answer.ok);\r\n                updateServerStatus(true);\r\n            }\r\n        }\r\n        fetchObj();\r\n    }, []);\r\n\r\n    window.onresize = function () {\r\n        updateIsDesktop(screenStatus());\r\n    };\r\n\r\n    return (\r\n        <div> {\r\n            captchaIsActive ?\r\n                <div className={styles.captchaOuter}>\r\n                    <div className={isDesktop ? styles.captchaContainerDesktop : styles.captchaContainerPortrait}>\r\n                        <CaptchaExitBttn isDesktop={isDesktop} updateCaptchaIsActive={updateCaptchaIsActive} />\r\n                        {serverIsLiving ? captchaType === 'TEXT' ? <TextCaptcha\r\n                            updateCaptchaIsActive={updateCaptchaIsActive}\r\n                            isDesktop={isDesktop}\r\n                            captchaValue={captchaValue}\r\n                            updateCaptchaValue={updateCaptchaValue}\r\n                            updateCaptchaToken={updateCaptchaToken}\r\n                            inputRef={inputRef}\r\n                            updateInputRef={updateInputRef}\r\n                            cbm={cbm}\r\n                            captchaType={captchaType}\r\n                            captchaIsActive={captchaIsActive}\r\n                        />\r\n                            : captchaType === 'MATH' ?\r\n                                <MathCaptcha updateCaptchaIsActive={updateCaptchaIsActive}\r\n                                    isDesktop={isDesktop}\r\n                                    captchaValue={captchaValue}\r\n                                    updateCaptchaValue={updateCaptchaValue}\r\n                                    updateCaptchaToken={updateCaptchaToken}\r\n                                    inputRef={inputRef}\r\n                                    updateInputRef={updateInputRef}\r\n                                    cbm={cbm}\r\n                                    captchaType={captchaType}\r\n\r\n                                />\r\n                                : captchaType === 'AUDIO' ?\r\n                                    <AudioCaptcha updateCaptchaIsActive={updateCaptchaIsActive}\r\n                                        isDesktop={isDesktop}\r\n                                        captchaValue={captchaValue}\r\n                                        updateCaptchaValue={updateCaptchaValue}\r\n                                        updateCaptchaToken={updateCaptchaToken}\r\n                                        inputRef={inputRef}\r\n                                        updateInputRef={updateInputRef}\r\n                                        cbm={cbm}\r\n                                        captchaType={captchaType}\r\n                                    />\r\n                                    : captchaType === 'GRAPH' ?\r\n                                        <GraphCaptcha\r\n                                            updateCaptchaIsActive={updateCaptchaIsActive}\r\n                                            isDesktop={isDesktop}\r\n                                            captchaValue={captchaValue}\r\n                                            updateCaptchaValue={updateCaptchaValue}\r\n                                            updateCaptchaToken={updateCaptchaToken}\r\n                                            inputRef={inputRef}\r\n                                            updateInputRef={updateInputRef}\r\n                                            cbm={cbm}\r\n                                            captchaType={captchaType}\r\n                                        /> :\r\n                                        captchaType === 'ANIME' ?\r\n                                            <AnimeCaptcha\r\n                                                updateCaptchaIsActive={updateCaptchaIsActive}\r\n                                                isDesktop={isDesktop}\r\n                                                captchaValue={captchaValue}\r\n                                                updateCaptchaValue={updateCaptchaValue}\r\n                                                updateCaptchaToken={updateCaptchaToken}\r\n                                                inputRef={inputRef}\r\n                                                updateInputRef={updateInputRef}\r\n                                                cbm={cbm}\r\n                                                captchaType={captchaType}\r\n                                            /> :\r\n                                            <Fragment />\r\n                            : <DeadCaptcha isDesktop={isDesktop} />}\r\n                    </div>\r\n                </div> : <Fragment />\r\n        }\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\nimport './index.css';\n\nimport { CaptchaManager, CaptchaProps } from 'captcha-react-library/'\nimport 'captcha-react-library/dist/index.css';\n\nconst App = () => {\n  const [captchaType, updateCaptchaType] = useState('');\n\n  const { captchaIsActive, updateCaptchaIsActive, captchaToken, updateCaptchaToken } = CaptchaProps();\n\n  function showCaptcha(captchaType) {\n    updateCaptchaIsActive(true);\n    updateCaptchaType(captchaType);\n  }\n\n  return (\n    <div>\n      <div className='authContainer'>\n        <div className='authInnerContainer'>\n          <br />\n          <span>{!captchaToken ? '' : 'Верификация успешно пройдена!'}</span>\n          <div className='buttonContainer'>\n            <button onClick={() => { showCaptcha('TEXT'); }}>Текстовая</button>\n            <button onClick={() => { showCaptcha('MATH'); }}>Математическая</button>\n            <button onClick={() => { showCaptcha('AUDIO'); }}>Аудио</button>\n            <button onClick={() => { showCaptcha('GRAPH'); }}>Графическая</button>\n            <button onClick={() => { showCaptcha('ANIME'); }}>Анимационная</button>\n          </div>\n        </div>\n      </div>\n      <CaptchaManager captchaIsActive={captchaIsActive}\n        updateCaptchaIsActive={updateCaptchaIsActive}\n        updateCaptchaToken={updateCaptchaToken}\n        captchaType={captchaType} />\n    </div >\n  )\n}\n\nexport default App\n","import { useState } from 'react';\r\nimport React from 'react';\r\n\r\nexport default function CaptchaProps() {\r\n    const [captchaIsActive, updateCaptchaIsActive] = useState(false);\r\n    const [captchaToken, updateCaptchaToken] = useState(false);\r\n\r\n    return { captchaIsActive, updateCaptchaIsActive, captchaToken, updateCaptchaToken }\r\n}","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}