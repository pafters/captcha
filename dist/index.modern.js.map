{"version":3,"file":"index.modern.js","sources":["../src/modules/showCaptchaBttn/CaptchaProps.js","../src/components/slider/CaptchaSlider.js","../src/components/captchaInput/CaptchaInput.js","../src/components/captchaSubmitBttn/CaptchaSubmitBttn.js","../src/components/updateCaptchaBttn/UpdateCaptchaBttn.js","../src/captchaes/textCaptcha/TextCaptcha.js","../src/conf.js","../src/modules/CaptchaBaseModule.js","../src/captchaes/deadCaptcha/DeadCaptcha.js","../src/components/captchaExitBttn/CaptchaExitBttn.js","../src/captchaes/mathCaptcha/MathCaptcha.js","../src/components/captchaToSpeech/CaptchaToSpeech.js","../src/captchaes/audioCaptcha/AudioCaptcha.js","../src/captchaes/graphCaptcha/GraphCaptcha.js","../src/captchaes/animeCaptcha/AnimeCaptcha.js","../src/components/captchaManager/CaptchaManager.js"],"sourcesContent":["import { useState } from 'react';\r\nimport React from 'react';\r\n\r\nexport default function CaptchaProps() {\r\n    const [captchaIsActive, updateCaptchaIsActive] = useState(false);\r\n    const [captchaToken, updateCaptchaToken] = useState(false);\r\n\r\n    return { captchaIsActive, updateCaptchaIsActive, captchaToken, updateCaptchaToken }\r\n}","import { useEffect, useState } from 'react';\r\nimport React from 'react';\r\nimport styles from './captchaSlider.css';\r\n\r\nexport default function CaptchaSlider({ isDesktop, updateCaptchaData, updateCaptchaIndex, captchas, captchaIndex }) {\r\n\r\n    const [width, setWidth] = useState(0);\r\n\r\n    const [failedCounts, updateFailedCounts] = useState(0);\r\n\r\n    const changeWidth = (event) => {\r\n        setWidth(event.target.value);\r\n        updateCaptchaIndex(event.target.value / 20);\r\n    };\r\n\r\n    function checkRangePosition() {\r\n        updateFailedCounts(failedCounts + 1);\r\n        if (failedCounts == 4) {\r\n            updateFailedCounts(0);\r\n            updateCaptchaData();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {captchas &&\r\n                <input\r\n                    className={isDesktop ? styles.captchaSliderDesktop + ' ' + styles.captchaSlider :\r\n                        styles.captchaSliderPortrait + ' ' + styles.captchaSlider}\r\n                    type=\"range\"\r\n                    onChange={changeWidth}\r\n                    onMouseUp={() => checkRangePosition()}\r\n                    onTouchEnd={() => checkRangePosition()}\r\n                    min={0}\r\n                    max={(captchas.length - 1) * 20}\r\n                    step={20}\r\n                    value={width}\r\n                />\r\n            }\r\n\r\n            {/* <p>{width}</p> */}\r\n        </div>\r\n    );\r\n}\r\n","import { useEffect, useRef } from 'react';\r\nimport React from 'react';\r\n\r\nimport styles from './captchaInput.css';\r\n\r\nexport default function CaptchaInput({ isDesktop, cbm, updateCaptchaValue, updateCaptchaToken,\r\n    updateInputRef, captchaIDs, captchaValue,\r\n    updateCaptchaIsActive, updateCaptchaData, audioStop, updErrCounts, errCounts, captchaIndex,\r\n    captchaType }) {\r\n    const captchaInpRef = useRef();\r\n\r\n    useEffect(() => {\r\n        updateInputRef(captchaInpRef);\r\n    }, [])\r\n\r\n    async function submitValue() {\r\n        try {\r\n            const answer = await cbm.checkCaptcha({ code: captchaValue, captchaIDs: captchaIDs, index: captchaIndex, type: captchaType });\r\n            if (answer) {\r\n                updateCaptchaToken(answer.captchaToken);\r\n                updateCaptchaIsActive(false);\r\n                if (audioStop)\r\n                    audioStop();\r\n            }\r\n        } catch (err) {\r\n            updateCaptchaData(true);\r\n            if (audioStop)\r\n                audioStop();\r\n            updErrCounts(errCounts + 1);\r\n            if (errCounts == 5) {\r\n                updErrCounts(0);\r\n                updateCaptchaToken(false);\r\n                updateCaptchaIsActive(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <input ref={captchaInpRef} onKeyUp={(event) => {\r\n            if (event.key == 'Enter') {\r\n                captchaInpRef.current.value = '';\r\n                submitValue();\r\n            }\r\n        }} onChange={() => updateCaptchaValue(captchaInpRef.current.value)}\r\n            className={isDesktop ? styles.captchaInputDesktop : styles.captchaInputPortrait} placeholder=\"Ваш ответ\" />\r\n    );\r\n}","\r\nimport styles from './captchaSubmitBttn.css';\r\nimport React from 'react';\r\n\r\nexport default function CaptchaSubmitBttn({ isDesktop, captchaValue, cbm,\r\n    captchaIDs, updateCaptchaToken, updateCaptchaIsActive, updateCaptchaData, inputRef,\r\n    audioStop, updErrCounts, errCounts, captchaIndex, updateActiveStates, captchaType,\r\n    updateCaptchaIndex }) {\r\n\r\n    async function submitValue() {\r\n        if (inputRef)\r\n            inputRef.current.value = '';\r\n        try {\r\n            if (updateActiveStates) {\r\n                updateActiveStates([\r\n                    false, false, false,\r\n                    false, false, false,\r\n                    false, false, false,\r\n                ])\r\n            }\r\n            const answer = await cbm.checkCaptcha({ code: captchaValue, captchaIDs: captchaIDs, index: captchaIndex, type: captchaType });\r\n            if (answer) {\r\n                updateCaptchaToken(answer.captchaToken);\r\n                updateCaptchaIsActive(false);\r\n                if (audioStop)\r\n                    audioStop();\r\n            }\r\n        } catch (err) {\r\n            updateCaptchaData(true);\r\n            if (updateCaptchaIndex)\r\n                updateCaptchaIndex(1)\r\n            if (audioStop)\r\n                audioStop();\r\n            updErrCounts(errCounts + 1);\r\n            if (errCounts == 5) {\r\n                updErrCounts(0);\r\n                updateCaptchaToken(false);\r\n                updateCaptchaIsActive(false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <button onClick={submitValue} className={isDesktop ? styles.captchaSubmitBttnDesktop + ' ' + styles.captchaSubmitBttn + ' ' + styles.noselect\r\n            : styles.captchaSubmitBttnPortrait + ' ' + styles.captchaSubmitBttn + ' ' + styles.noselect}>Отправить</button>\r\n    );\r\n}","import React from \"react\";\r\nimport { useState } from 'react';\r\n\r\nimport styles from './updateCaptchaBttn.css';\r\n\r\nexport default function UpdateCaptchaBttn({ updateCaptchaData, isDesktop, audioStop, updateCaptchaToken,\r\n    updateCaptchaIsActive, updateCaptchaIndex\r\n}) {\r\n    const [rerunCounts, updateRerunCounts] = useState(0);\r\n\r\n    return (\r\n        <div >\r\n            <div\r\n                onClick={() => {\r\n                    updateRerunCounts(rerunCounts + 1);\r\n                    if (rerunCounts == 5) {\r\n                        if (updateCaptchaIndex)\r\n                            updateCaptchaIndex(1);\r\n                        updateRerunCounts(0);\r\n                        updateCaptchaToken(false);\r\n                        updateCaptchaIsActive(false);\r\n                    } else {\r\n                        if (audioStop)\r\n                            audioStop();\r\n                        updateCaptchaData(true);\r\n                    }\r\n                }}\r\n                className={isDesktop ? styles.updateCaptchaBttnDesktop : styles.updateCaptchaBttnPortrait} />\r\n        </div>\r\n    );\r\n}","import { useEffect, useState } from 'react';\r\nimport React from 'react'\r\n\r\nimport CaptchaSlider from '../../components/slider/CaptchaSlider';\r\nimport CaptchaInput from '../../components/captchaInput/CaptchaInput';\r\nimport CaptchaSubmitBttn from '../../components/captchaSubmitBttn/CaptchaSubmitBttn';\r\nimport UpdateCaptchaBttn from '../../components/updateCaptchaBttn/UpdateCaptchaBttn';\r\n\r\nimport styles from './textCaptcha.css';\r\n\r\nexport default function TextCaptcha({ cbm, updateCaptchaIsActive, updateInputRef,\r\n    inputRef, isDesktop, captchaValue, updateCaptchaValue, updateCaptchaToken, captchaIsActive,\r\n    captchaType\r\n}) {\r\n    const [errCounts, updErrCounts] = useState(0);\r\n\r\n    const [captchas, updateCaptchas] = useState('');\r\n    const [captchaIndex, updateCaptchaIndex] = useState(0);\r\n\r\n    useEffect(() => {\r\n        updateCaptchaData();\r\n        updateCaptchaToken(false);\r\n    }, []);\r\n\r\n    async function updateCaptchaData() {\r\n        if (captchaIsActive) {\r\n            const answer = await cbm.getCaptcha('TEXT');\r\n            if (answer) {\r\n                updateCaptchas(answer.captchas);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <img\r\n                className={styles.captchaImg}\r\n                src={captchas[captchaIndex]?.body}\r\n            />\r\n            <div >\r\n                <CaptchaSlider isDesktop={isDesktop}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    captchas={captchas}\r\n                    updateCaptchaIndex={updateCaptchaIndex} />\r\n            </div>\r\n            <div className={styles.captchaBttnsContainer}>\r\n                <UpdateCaptchaBttn\r\n                    updateCaptchaIndex={updateCaptchaIndex} updateCaptchaData={updateCaptchaData}\r\n                    isDesktop={isDesktop}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                />\r\n            </div>\r\n            <div className={styles.unswerContainer}>\r\n                <CaptchaInput isDesktop={isDesktop} updateCaptchaValue={updateCaptchaValue}\r\n                    cbm={cbm} captchaIDs={[captchas[captchaIndex]?.captchaID]}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    updateInputRef={updateInputRef}\r\n                    updateCaptchaIndex={updateCaptchaIndex}\r\n                    captchaValue={captchaValue}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    captchaType={captchaType}\r\n                />\r\n                <CaptchaSubmitBttn isDesktop={isDesktop} captchaValue={captchaValue}\r\n                    cbm={cbm} captchaIDs={[captchas[captchaIndex]?.captchaID]}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    updateCaptchaIndex={updateCaptchaIndex}\r\n                    inputRef={inputRef}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    captchaType={captchaType}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n","\r\nconst CONFIG = { BACKEND_API: `https://captcha.sixhands.co` }//`http://localhost:24070/` };\r\n\r\nexport default CONFIG;","import axios from 'axios';\r\nimport CONFIG from '../conf';\r\nclass CaptchaBaseModule {\r\n\r\n    async postRequest(request, props = null, headers) {\r\n        try {\r\n            const response = await axios.post(`${CONFIG.BACKEND_API}/${request}`, props);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error(`Error getting data from API: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    async getRequest(request, props = null) {\r\n        try {\r\n            const response = await axios.get(`${CONFIG.BACKEND_API}/${request}`, props);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error(`Error getting data from API: ${error.message}`);\r\n        }\r\n    }\r\n\r\n\r\n    async getCaptcha(type) {\r\n        const answer = await this.postRequest(`captchas`, { type: type, });\r\n        if (answer) return answer;\r\n    }\r\n\r\n    async getServerStatus() {\r\n        const answer = await this.getRequest(`health`);\r\n        if (answer) return answer;\r\n    }\r\n\r\n    async checkCaptcha(req) {\r\n        let answer = null;\r\n        if (req.index)\r\n            answer = await this.postRequest(`captchas/check`, req, true);\r\n        else\r\n            answer = await this.postRequest(`captchas/check`, req, true);\r\n        if (answer) return answer;\r\n    }\r\n\r\n\r\n\r\n    // async post(endpoint, data = {}) {\r\n    //     try {\r\n    //         const response = await axios.post(`${this.baseUrl}/${endpoint}`, data);\r\n    //         return response.data;\r\n    //     } catch (error) {\r\n    //         throw new Error(`Error posting data to API: ${error.message}`);\r\n    //     }\r\n    // }\r\n\r\n    // Добавьте другие методы, такие как put(), delete() и т.д., если нужно.\r\n\r\n}\r\n\r\nexport default CaptchaBaseModule;\r\n\r\n","import React from \"react\";\r\n\r\nimport styles from \"./deadCaptcha.css\";\r\n\r\nexport default function DeadCaptcha({ isDesktop }) {\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.serverStatus}></div>\r\n            <span className={isDesktop ? styles.captchaStatusNotificationdDesktop : styles.captchaStatusNotificationdPortrait}>Сервер спит</span>\r\n        </div>\r\n    );\r\n} ","import React from 'react';\r\n\r\nimport styles from './captchaExitBttn.css';\r\n\r\nexport default function CaptchaExitBttn({ isDesktop, updateCaptchaIsActive }) {\r\n\r\n    function leftCaptchaContainer() {\r\n        updateCaptchaIsActive(false);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.captachaExitContainer + ' ' + styles.noselect}>\r\n            <img\r\n                onClick={leftCaptchaContainer}\r\n                className={isDesktop ? styles.captchaExitBttnDesktop\r\n                    : styles.captchaExitBttnPortrait}\r\n            />\r\n        </div>\r\n    );\r\n}","import { useEffect, useState } from 'react';\r\nimport React from 'react'\r\n\r\nimport CaptchaSlider from '../../components/slider/CaptchaSlider';\r\nimport CaptchaInput from '../../components/captchaInput/CaptchaInput';\r\nimport CaptchaSubmitBttn from '../../components/captchaSubmitBttn/CaptchaSubmitBttn';\r\nimport UpdateCaptchaBttn from '../../components/updateCaptchaBttn/UpdateCaptchaBttn';\r\n\r\nimport styles from './mathCaptcha.css';\r\n\r\nexport default function TextCaptcha({ cbm, updateCaptchaIsActive, updateInputRef,\r\n    inputRef, isDesktop, captchaValue, updateCaptchaValue, updateCaptchaToken,\r\n    captchaType\r\n}) {\r\n    const [errCounts, updErrCounts] = useState(0);\r\n\r\n    const [captchas, updateCaptchas] = useState('');\r\n    const [captchaIndex, updateCaptchaIndex] = useState(0);\r\n\r\n    useEffect(() => {\r\n        updateCaptchaData();\r\n        updateCaptchaToken(false);\r\n    }, []);\r\n\r\n    async function updateCaptchaData() {\r\n        const answer = await cbm.getCaptcha('MATH');\r\n        if (answer) {\r\n            updateCaptchas(answer.captchas);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <img\r\n                className={styles.captchaImg}\r\n                src={captchas[captchaIndex]?.body}\r\n            />\r\n            <div >\r\n                <CaptchaSlider isDesktop={isDesktop}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaIndex={updateCaptchaIndex}\r\n                    captchas={captchas} />\r\n\r\n            </div>\r\n            <div className={styles.captchaBttnsContainer}>\r\n                <UpdateCaptchaBttn\r\n                    updateCaptchaIndex={updateCaptchaIndex} updateCaptchaData={updateCaptchaData}\r\n                    isDesktop={isDesktop}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                />\r\n            </div>\r\n            <div className={styles.unswerContainer}>\r\n                <CaptchaInput isDesktop={isDesktop} updateCaptchaValue={updateCaptchaValue}\r\n                    cbm={cbm} captchaIDs={[captchas[captchaIndex]?.captchaID]}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    updateInputRef={updateInputRef}\r\n                    updateCaptchaIndex={updateCaptchaIndex}\r\n                    captchaValue={captchaValue}\r\n                    captchaIndex={captchaIndex}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    captchaType={captchaType}\r\n                />\r\n                <CaptchaSubmitBttn isDesktop={isDesktop} captchaValue={captchaValue}\r\n                    cbm={cbm} captchaIDs={[captchas[captchaIndex]?.captchaID]}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    updateCaptchaIndex={updateCaptchaIndex}\r\n                    inputRef={inputRef}\r\n                    captchaIndex={captchaIndex}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    captchaType={captchaType}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport styles from './captchaToSpeech.css';\r\n\r\nexport default function CaptchaToSpeech({ audioPlay, isDesktop }) {\r\n\r\n    return (\r\n        <div className={isDesktop ? styles.captchaToSpeechBttnDesktop : styles.captchaToSpeechBttnPortrait} onClick={() => audioPlay()}></div>\r\n    );\r\n}","import { useEffect, useRef, useState } from 'react';\r\nimport React from 'react'\r\n\r\nimport styles from './audioCaptcha.css';\r\nimport CaptchaInput from '../../components/captchaInput/CaptchaInput';\r\nimport CaptchaSubmitBttn from '../../components/captchaSubmitBttn/CaptchaSubmitBttn';\r\nimport CaptchaToSpeech from '../../components/captchaToSpeech/CaptchaToSpeech';\r\nimport UpdateCaptchaBttn from '../../components/updateCaptchaBttn/UpdateCaptchaBttn';\r\n\r\nexport default function AudioCaptcha({ cbm, updateCaptchaIsActive, updateInputRef,\r\n    inputRef, isDesktop, captchaValue, updateCaptchaValue, updateCaptchaToken,\r\n    captchaType\r\n}) {\r\n\r\n    const [captchas, updateCaptchas] = useState('');\r\n    const [noticeIsActive, updateNoticeState] = useState(false);\r\n    const [errCounts, updErrCounts] = useState(0);\r\n    const audioPlayer = useRef();\r\n\r\n    useEffect(() => {\r\n        updateCaptchaData();\r\n        updateCaptchaToken(false);\r\n\r\n    }, []);\r\n\r\n    async function updateCaptchaData(isUpd) {\r\n        const answer = await cbm.getCaptcha('AUDIO');\r\n        if (answer) {\r\n            updateCaptchas(answer.captchas[0]);\r\n            if (isUpd) {\r\n                if (!noticeIsActive) {\r\n                    updateNoticeState(true);\r\n                    setTimeout(() => updateNoticeState(false), 1000)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function audioStop() {\r\n        if (audioPlayer?.current) {\r\n            audioPlayer.current.pause();\r\n            audioPlayer.current.currentTime = 0;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function audioPlay() {\r\n        if (audioPlayer?.current) {\r\n            audioPlayer.current.play();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <audio\r\n                src={captchas.body}\r\n                ref={audioPlayer}\r\n            // onTimeUpdate={onPlaying}\r\n            ></audio>\r\n            <div className={styles.captchaBttnsContainer}>\r\n                <div className={styles.captchaBttn}>\r\n                    <UpdateCaptchaBttn\r\n                        isDesktop={isDesktop}\r\n                        audioPlayer={audioPlayer}\r\n                        updateCaptchaData={updateCaptchaData}\r\n                        audioStop={audioStop}\r\n                    />\r\n                </div>\r\n                <div className={styles.captchaBttn + ' ' + styles.captchaSpeechBttn}>\r\n                    <CaptchaToSpeech audioPlay={audioPlay} isDesktop={isDesktop} />\r\n                </div>\r\n            </div>\r\n            <span className={isDesktop ? styles.updNoticeDesk\r\n                : styles.updNoticePort}>{noticeIsActive ? 'Капча успешно обновлена!' : 'Прослушайте капчу'}</span>\r\n            <div className={styles.unswerContainer}>\r\n                <CaptchaInput isDesktop={isDesktop} updateCaptchaValue={updateCaptchaValue}\r\n                    cbm={cbm} captchaIDs={[captchas?.captchaID]}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    updateInputRef={updateInputRef}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    audioStop={audioStop}\r\n                    captchaType={captchaType}\r\n                    captchaValue={captchaValue}\r\n                />\r\n                <CaptchaSubmitBttn isDesktop={isDesktop} captchaValue={captchaValue}\r\n                    cbm={cbm} captchaIDs={[captchas?.captchaID]}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    inputRef={inputRef}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    audioStop={audioStop}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import { useEffect, useState, createRef } from 'react';\r\nimport React from 'react'\r\n\r\n// import CaptchaSlider from '../../components/slider/CaptchaSlider';\r\n// import CaptchaInput from '../../components/captchaInput/CaptchaInput';\r\nimport CaptchaSubmitBttn from '../../components/captchaSubmitBttn/CaptchaSubmitBttn';\r\nimport UpdateCaptchaBttn from '../../components/updateCaptchaBttn/UpdateCaptchaBttn';\r\n\r\nimport styles from './graphCaptcha.css';\r\n\r\nexport default function GraphCaptcha({ cbm, updateCaptchaIsActive, updateInputRef,\r\n    inputRef, isDesktop, captchaValue, updateCaptchaValue, updateCaptchaToken,\r\n    captchaType\r\n}) {\r\n    const [errCounts, updErrCounts] = useState(0);\r\n    const [captchas, updateCaptchas] = useState([]);\r\n    const [captchaIndex, updateCaptchaIndex] = useState(0);\r\n    const [activeCaptchasIndex, updActiveCapthasIndex] = useState([]);\r\n    const [activeCaptchas, updActiveCapthas] = useState([]);\r\n    const [activeStates, updateActiveStates] = useState([\r\n        false, false, false,\r\n        false, false, false,\r\n        false, false, false,\r\n    ]);\r\n\r\n    const [noticeIsActive, updateNoticeState] = useState(true);\r\n\r\n    useEffect(() => {\r\n        updateCaptchaData();\r\n        updateCaptchaToken(false);\r\n    }, []);\r\n\r\n    async function updateCaptchaData(isUpd) {\r\n        updateNoticeState(true);\r\n        updActiveCapthas([]);\r\n        const answer = await cbm.getCaptcha('GRAPH');\r\n        if (answer) {\r\n            updateCaptchas(answer.captchas);\r\n            updateNoticeState(false);\r\n            //setTimeout(() => updateNoticeState(false), 1000)\r\n        }\r\n    }\r\n\r\n    function changeCaptchaState(index) {\r\n        const indexCaptcha = activeCaptchasIndex.indexOf(index)\r\n        const newActiveStates = [...activeStates];\r\n        if (indexCaptcha >= 0) {\r\n            updActiveCapthasIndex([...activeCaptchasIndex].filter(function (elem) {\r\n                return elem !== index\r\n            }));\r\n\r\n            updActiveCapthas([...activeCaptchas].filter((item, i) => {\r\n                return captchas[index].captchaID !== item\r\n            }))\r\n            newActiveStates[index] = false;\r\n            updateActiveStates(newActiveStates);\r\n        } else {\r\n            updActiveCapthasIndex([...activeCaptchasIndex, index]);\r\n            updActiveCapthas([...activeCaptchas, captchas[index].captchaID])\r\n            newActiveStates[index] = true;\r\n            updateActiveStates(newActiveStates);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <div className={styles.container}>\r\n                <div className={isDesktop ? styles.captchaContainer + ' ' + styles.gripGadDesktop : styles.captchaContainer + ' ' + styles.gripGadPortrait}>\r\n                    {captchas.map((captcha, index) =>\r\n                        <div onClick={() => { changeCaptchaState(index) }} key={index}\r\n                            className={(isDesktop ? styles.captchaDesktop + ' ' + (activeStates[index] ? styles.elemActiveDesktop : '')\r\n                                : styles.captchaPortrait + ' ' + (activeStates[index] ? styles.elemActivePortrait : ''))}\r\n                            style={{ content: `url(${captcha?.body})` }}\r\n                        ></div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <p className={isDesktop ? styles.updNoticeDesk\r\n                : styles.updNoticePort}>{noticeIsActive ? 'Получаем новую капчу...' : 'Выберите все одинаковые изображения'}</p>\r\n            <div className={styles.captchaBttnsContainer}>\r\n                <UpdateCaptchaBttn\r\n                    updateCaptchaIndex={updateCaptchaIndex} updateCaptchaData={updateCaptchaData}\r\n                    isDesktop={isDesktop}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                />\r\n            </div>\r\n            <div className={styles.unswerContainer}>\r\n                <CaptchaSubmitBttn isDesktop={isDesktop} captchaValue={captchaValue}\r\n                    cbm={cbm} captchaIDs={activeCaptchas}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    updateCaptchaIndex={updateCaptchaIndex}\r\n                    inputRef={inputRef}\r\n                    captchaIndex={captchaIndex}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    captchaType={captchaType}\r\n                    updateActiveStates={updateActiveStates}\r\n                />\r\n            </div>\r\n\r\n        </div >\r\n    );\r\n}\r\n","import { useEffect, useState, createRef } from 'react';\r\nimport React from 'react'\r\n\r\nimport CaptchaSubmitBttn from '../../components/captchaSubmitBttn/CaptchaSubmitBttn';\r\nimport UpdateCaptchaBttn from '../../components/updateCaptchaBttn/UpdateCaptchaBttn';\r\n\r\nimport styles from './animeCaptcha.css';\r\n\r\nexport default function AnimeCaptcha({ cbm, updateCaptchaIsActive, updateInputRef,\r\n    inputRef, isDesktop, captchaValue, updateCaptchaValue, updateCaptchaToken,\r\n    captchaType\r\n}) {\r\n    const [errCounts, updErrCounts] = useState(0);\r\n    const [captchas, updateCaptchas] = useState([]);\r\n    const [standard, updStandard] = useState({});\r\n\r\n    const [captchaIndex, updateCaptchaIndex] = useState(1);\r\n\r\n    const [noticeIsActive, updateNoticeState] = useState(true);\r\n\r\n    useEffect(() => {\r\n        updateCaptchaData();\r\n        updateCaptchaToken(false);\r\n    }, []);\r\n\r\n    async function updateCaptchaData(isUpd) {\r\n        updateNoticeState(true);\r\n        const answer = await cbm.getCaptcha('ANIME');\r\n        if (answer) {\r\n            updateCaptchas(answer.captchas); // .filter((element, index) => index !== 0)\r\n            updStandard(answer.captchas[0]);\r\n            updateNoticeState(false);\r\n        }\r\n    }\r\n\r\n    const switchImage = (state) => {\r\n        let index = captchaIndex + state;\r\n        if (index < 1)\r\n            index = captchas.length - 1;\r\n        else if (index > captchas.length - 1)\r\n            index = 1;\r\n        updateCaptchaIndex(index);\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            {!noticeIsActive && <div className={styles.container + ' ' + styles.noselect}>\r\n                <div className={isDesktop ? styles.captchaContainer + ' ' + styles.gripGadDesktop : styles.captchaContainer + ' ' + styles.gripGadPortrait}>\r\n                    <div\r\n                        className={(isDesktop ? styles.captchaDesktop : styles.captchaPortrait)}\r\n                        style={{ content: `url(${standard?.body})` }}\r\n                    />\r\n\r\n                    <div\r\n                        className={(isDesktop ? styles.captchaDesktop : styles.captchaPortrait)}\r\n                        style={{ background: `url(${captchas[captchaIndex]?.body}) no-repeat center center / cover` }}\r\n                    >\r\n                        <div\r\n                            onClick={() => switchImage(-1)}\r\n                            className={isDesktop ? styles.switchButtonDesktop + ' ' + styles.leftButtonDesktop\r\n                                : styles.switchButtonPortrait + ' ' + styles.leftButtonPortrait} />\r\n                        <div\r\n                            onClick={() => switchImage(1)}\r\n                            className={isDesktop ? styles.switchButtonDesktop + ' ' + styles.rightButtonDesktop\r\n                                : styles.switchButtonPortrait + ' ' + styles.rightButtonPortrait} />\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n            <p className={isDesktop ? styles.updNoticeDesk + ' ' + styles.noselect\r\n                : styles.updNoticePort + ' ' + styles.noselect}>{noticeIsActive ? 'Получаем новую капчу...' : 'Приведите в одинаковое положение'}</p>\r\n            <div className={styles.captchaBttnsContainer + ' ' + styles.noselect}>\r\n                <UpdateCaptchaBttn\r\n                    updateCaptchaIndex={updateCaptchaIndex} updateCaptchaData={updateCaptchaData}\r\n                    isDesktop={isDesktop}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                />\r\n            </div>\r\n            <div className={styles.unswerContainer + ' ' + styles.noselect}>\r\n                <CaptchaSubmitBttn isDesktop={isDesktop} captchaValue={captchaValue}\r\n                    cbm={cbm} captchaIDs={[captchas[captchaIndex]?.captchaID]}\r\n                    updateCaptchaIsActive={updateCaptchaIsActive}\r\n                    updateCaptchaData={updateCaptchaData}\r\n                    updateCaptchaToken={updateCaptchaToken}\r\n                    updateCaptchaIndex={updateCaptchaIndex}\r\n                    inputRef={inputRef}\r\n                    updErrCounts={updErrCounts}\r\n                    errCounts={errCounts}\r\n                    captchaType={captchaType}\r\n                />\r\n            </div>\r\n\r\n        </div >\r\n    );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport React, { Fragment } from \"react\";\r\n\r\nimport TextCaptcha from \"../../captchaes/textCaptcha/TextCaptcha\";\r\nimport CaptchaBaseModule from \"../../modules/CaptchaBaseModule\";\r\n\r\nimport styles from './captchaManager.css';\r\nimport DeadCaptcha from \"../../captchaes/deadCaptcha/DeadCaptcha\";\r\n\r\nimport CaptchaExitBttn from \"../captchaExitBttn/CaptchaExitBttn\";\r\nimport MathCaptcha from \"../../captchaes/mathCaptcha/MathCaptcha\";\r\nimport AudioCaptcha from \"../../captchaes/audioCaptcha/AudioCaptcha\";\r\nimport GraphCaptcha from \"../../captchaes/graphCaptcha/GraphCaptcha\";\r\nimport AnimeCaptcha from \"../../captchaes/animeCaptcha/AnimeCaptcha\";\r\n\r\n\r\nexport { TextCaptcha, DeadCaptcha, MathCaptcha, AudioCaptcha }\r\n\r\n\r\nexport default function CaptchaManager({ updateCaptchaIsActive, captchaIsActive, updateCaptchaToken, captchaType }) {\r\n    function screenStatus() {\r\n        return window.innerWidth > window.innerHeight ? true : false;\r\n    }\r\n\r\n    const cbm = new CaptchaBaseModule();\r\n\r\n    const [isDesktop, updateIsDesktop] = useState(screenStatus());\r\n\r\n    const [captchaValue, updateCaptchaValue] = useState('');\r\n    const [inputRef, updateInputRef] = useState(null);\r\n    const [serverIsLiving, updateServerStatus] = useState(false);\r\n\r\n    useEffect(() => {\r\n        async function fetchObj() {\r\n            const answer = await cbm.getServerStatus();\r\n            if (answer) {\r\n                // updateServerStatus(answer.ok);\r\n                updateServerStatus(true);\r\n            }\r\n        }\r\n        fetchObj();\r\n    }, []);\r\n\r\n    window.onresize = function () {\r\n        updateIsDesktop(screenStatus());\r\n    };\r\n\r\n    return (\r\n        <div> {\r\n            captchaIsActive ?\r\n                <div className={styles.captchaOuter}>\r\n                    <div className={isDesktop ? styles.captchaContainerDesktop : styles.captchaContainerPortrait}>\r\n                        <CaptchaExitBttn isDesktop={isDesktop} updateCaptchaIsActive={updateCaptchaIsActive} />\r\n                        {serverIsLiving ? captchaType === 'TEXT' ? <TextCaptcha\r\n                            updateCaptchaIsActive={updateCaptchaIsActive}\r\n                            isDesktop={isDesktop}\r\n                            captchaValue={captchaValue}\r\n                            updateCaptchaValue={updateCaptchaValue}\r\n                            updateCaptchaToken={updateCaptchaToken}\r\n                            inputRef={inputRef}\r\n                            updateInputRef={updateInputRef}\r\n                            cbm={cbm}\r\n                            captchaType={captchaType}\r\n                            captchaIsActive={captchaIsActive}\r\n                        />\r\n                            : captchaType === 'MATH' ?\r\n                                <MathCaptcha updateCaptchaIsActive={updateCaptchaIsActive}\r\n                                    isDesktop={isDesktop}\r\n                                    captchaValue={captchaValue}\r\n                                    updateCaptchaValue={updateCaptchaValue}\r\n                                    updateCaptchaToken={updateCaptchaToken}\r\n                                    inputRef={inputRef}\r\n                                    updateInputRef={updateInputRef}\r\n                                    cbm={cbm}\r\n                                    captchaType={captchaType}\r\n\r\n                                />\r\n                                : captchaType === 'AUDIO' ?\r\n                                    <AudioCaptcha updateCaptchaIsActive={updateCaptchaIsActive}\r\n                                        isDesktop={isDesktop}\r\n                                        captchaValue={captchaValue}\r\n                                        updateCaptchaValue={updateCaptchaValue}\r\n                                        updateCaptchaToken={updateCaptchaToken}\r\n                                        inputRef={inputRef}\r\n                                        updateInputRef={updateInputRef}\r\n                                        cbm={cbm}\r\n                                        captchaType={captchaType}\r\n                                    />\r\n                                    : captchaType === 'GRAPH' ?\r\n                                        <GraphCaptcha\r\n                                            updateCaptchaIsActive={updateCaptchaIsActive}\r\n                                            isDesktop={isDesktop}\r\n                                            captchaValue={captchaValue}\r\n                                            updateCaptchaValue={updateCaptchaValue}\r\n                                            updateCaptchaToken={updateCaptchaToken}\r\n                                            inputRef={inputRef}\r\n                                            updateInputRef={updateInputRef}\r\n                                            cbm={cbm}\r\n                                            captchaType={captchaType}\r\n                                        /> :\r\n                                        captchaType === 'ANIME' ?\r\n                                            <AnimeCaptcha\r\n                                                updateCaptchaIsActive={updateCaptchaIsActive}\r\n                                                isDesktop={isDesktop}\r\n                                                captchaValue={captchaValue}\r\n                                                updateCaptchaValue={updateCaptchaValue}\r\n                                                updateCaptchaToken={updateCaptchaToken}\r\n                                                inputRef={inputRef}\r\n                                                updateInputRef={updateInputRef}\r\n                                                cbm={cbm}\r\n                                                captchaType={captchaType}\r\n                                            /> :\r\n                                            <Fragment />\r\n                            : <DeadCaptcha isDesktop={isDesktop} />}\r\n                    </div>\r\n                </div> : <Fragment />\r\n        }\r\n        </div>\r\n    );\r\n}"],"names":["CaptchaProps","captchaIsActive","updateCaptchaIsActive","useState","captchaToken","updateCaptchaToken","CaptchaSlider","isDesktop","updateCaptchaData","updateCaptchaIndex","captchas","captchaIndex","width","setWidth","failedCounts","updateFailedCounts","changeWidth","event","target","value","checkRangePosition","React","createElement","className","styles","captchaSliderDesktop","captchaSlider","captchaSliderPortrait","type","onChange","onMouseUp","onTouchEnd","min","max","length","step","CaptchaInput","cbm","updateCaptchaValue","updateInputRef","captchaIDs","captchaValue","audioStop","updErrCounts","errCounts","captchaType","captchaInpRef","useRef","useEffect","submitValue","answer","checkCaptcha","code","index","err","ref","onKeyUp","key","current","captchaInputDesktop","captchaInputPortrait","placeholder","CaptchaSubmitBttn","inputRef","updateActiveStates","onClick","captchaSubmitBttnDesktop","captchaSubmitBttn","noselect","captchaSubmitBttnPortrait","UpdateCaptchaBttn","rerunCounts","updateRerunCounts","updateCaptchaBttnDesktop","updateCaptchaBttnPortrait","TextCaptcha","_captchas$captchaInde","_captchas$captchaInde2","_captchas$captchaInde3","updateCaptchas","getCaptcha","captchaImg","src","body","captchaBttnsContainer","unswerContainer","captchaID","CONFIG","BACKEND_API","CaptchaBaseModule","postRequest","request","props","headers","response","axios","post","data","error","Error","message","getRequest","get","getServerStatus","req","DeadCaptcha","serverStatus","captchaStatusNotificationdDesktop","captchaStatusNotificationdPortrait","CaptchaExitBttn","leftCaptchaContainer","captachaExitContainer","captchaExitBttnDesktop","captchaExitBttnPortrait","CaptchaToSpeech","audioPlay","captchaToSpeechBttnDesktop","captchaToSpeechBttnPortrait","AudioCaptcha","noticeIsActive","updateNoticeState","audioPlayer","isUpd","setTimeout","pause","currentTime","play","captchaBttn","captchaSpeechBttn","updNoticeDesk","updNoticePort","GraphCaptcha","activeCaptchasIndex","updActiveCapthasIndex","activeCaptchas","updActiveCapthas","activeStates","changeCaptchaState","indexCaptcha","indexOf","newActiveStates","filter","elem","item","i","container","captchaContainer","gripGadDesktop","gripGadPortrait","map","captcha","captchaDesktop","elemActiveDesktop","captchaPortrait","elemActivePortrait","style","content","AnimeCaptcha","standard","updStandard","switchImage","state","background","switchButtonDesktop","leftButtonDesktop","switchButtonPortrait","leftButtonPortrait","rightButtonDesktop","rightButtonPortrait","CaptchaManager","screenStatus","window","innerWidth","innerHeight","updateIsDesktop","serverIsLiving","updateServerStatus","fetchObj","onresize","captchaOuter","captchaContainerDesktop","captchaContainerPortrait","MathCaptcha","Fragment"],"mappings":";;;AAGe,SAASA,YAAYA,GAAG;EACnC,MAAM,CAACC,eAAe,EAAEC,qBAAqB,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAChE,MAAM,CAACC,YAAY,EAAEC,kBAAkB,CAAC,GAAGF,QAAQ,CAAC,KAAK,CAAC;EAE1D,OAAO;IAAEF,eAAe;IAAEC,qBAAqB;IAAEE,YAAY;IAAEC;GAAoB;AACvF;;;;ACJe,SAASC,aAAaA,CAAC;EAAEC,SAAS;EAAEC,iBAAiB;EAAEC,kBAAkB;EAAEC,QAAQ;EAAEC;AAAa,CAAC,EAAE;EAEhH,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAM,CAACW,YAAY,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAEtD,MAAMa,WAAW,GAAIC,KAAK,IAAK;IAC3BJ,QAAQ,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAC5BV,kBAAkB,CAACQ,KAAK,CAACC,MAAM,CAACC,KAAK,GAAG,EAAE,CAAC;GAC9C;EAED,SAASC,kBAAkBA,GAAG;IAC1BL,kBAAkB,CAACD,YAAY,GAAG,CAAC,CAAC;IACpC,IAAIA,YAAY,IAAI,CAAC,EAAE;MACnBC,kBAAkB,CAAC,CAAC,CAAC;MACrBP,iBAAiB,EAAE;;;EAM3B,oBACIa,KAAA,CAAAC,aAAA,cACKZ,QAAQ,iBACLW,KAAA,CAAAC,aAAA;IACIC,SAAS,EAAEhB,SAAS,GAAGiB,MAAM,CAACC,oBAAoB,GAAG,GAAG,GAAGD,MAAM,CAACE,aAAa,GAC3EF,MAAM,CAACG,qBAAqB,GAAG,GAAG,GAAGH,MAAM,CAACE,aAAc;IAC9DE,IAAI,EAAC,OAAO;IACZC,QAAQ,EAAEb,WAAY;IACtBc,SAAS,EAAEA,MAAMV,kBAAkB,EAAG;IACtCW,UAAU,EAAEA,MAAMX,kBAAkB,EAAG;IACvCY,GAAG,EAAE,CAAE;IACPC,GAAG,EAAE,CAACvB,QAAQ,CAACwB,MAAM,GAAG,CAAC,IAAI,EAAG;IAChCC,IAAI,EAAE,EAAG;IACThB,KAAK,EAAEP;GACV,CAIJ,CAAC;AAEd;;;;ACxCe,SAASwB,YAAYA,CAAC;EAAE7B,SAAS;EAAE8B,GAAG;EAAEC,kBAAkB;EAAEjC,kBAAkB;EACzFkC,cAAc;EAAEC,UAAU;EAAEC,YAAY;EACxCvC,qBAAqB;EAAEM,iBAAiB;EAAEkC,SAAS;EAAEC,YAAY;EAAEC,SAAS;EAAEjC,YAAY;EAC1FkC;AAAY,CAAC,EAAE;EACf,MAAMC,aAAa,GAAGC,MAAM,EAAE;EAE9BC,SAAS,CAAC,MAAM;IACZT,cAAc,CAACO,aAAa,CAAC;GAChC,EAAE,EAAE,CAAC;EAEN,eAAeG,WAAWA,GAAG;IACzB,IAAI;MACA,MAAMC,MAAM,GAAG,MAAMb,GAAG,CAACc,YAAY,CAAC;QAAEC,IAAI,EAAEX,YAAY;QAAED,UAAU,EAAEA,UAAU;QAAEa,KAAK,EAAE1C,YAAY;QAAEiB,IAAI,EAAEiB;OAAa,CAAC;MAC7H,IAAIK,MAAM,EAAE;QACR7C,kBAAkB,CAAC6C,MAAM,CAAC9C,YAAY,CAAC;QACvCF,qBAAqB,CAAC,KAAK,CAAC;QAC5B,IAAIwC,SAAS,EACTA,SAAS,EAAE;;KAEtB,CAAC,OAAOY,GAAG,EAAE;MACV9C,iBAAiB,CAAC,IAAI,CAAC;MACvB,IAAIkC,SAAS,EACTA,SAAS,EAAE;MACfC,YAAY,CAACC,SAAS,GAAG,CAAC,CAAC;MAC3B,IAAIA,SAAS,IAAI,CAAC,EAAE;QAChBD,YAAY,CAAC,CAAC,CAAC;QACftC,kBAAkB,CAAC,KAAK,CAAC;QACzBH,qBAAqB,CAAC,KAAK,CAAC;;;;EAKxC,oBACImB,KAAA,CAAAC,aAAA;IAAOiC,GAAG,EAAET,aAAc;IAACU,OAAO,EAAGvC,KAAK,IAAK;MAC3C,IAAIA,KAAK,CAACwC,GAAG,IAAI,OAAO,EAAE;QACtBX,aAAa,CAACY,OAAO,CAACvC,KAAK,GAAG,EAAE;QAChC8B,WAAW,EAAE;;KAEnB;IAACpB,QAAQ,EAAEA,MAAMS,kBAAkB,CAACQ,aAAa,CAACY,OAAO,CAACvC,KAAK,CAAE;IAC/DI,SAAS,EAAEhB,SAAS,GAAGiB,QAAM,CAACmC,mBAAmB,GAAGnC,QAAM,CAACoC,oBAAqB;IAACC,WAAW,EAAC;GAAa,CAAC;AAEvH;;;;AC1Ce,SAASC,iBAAiBA,CAAC;EAAEvD,SAAS;EAAEkC,YAAY;EAAEJ,GAAG;EACpEG,UAAU;EAAEnC,kBAAkB;EAAEH,qBAAqB;EAAEM,iBAAiB;EAAEuD,QAAQ;EAClFrB,SAAS;EAAEC,YAAY;EAAEC,SAAS;EAAEjC,YAAY;EAAEqD,kBAAkB;EAAEnB,WAAW;EACjFpC;AAAmB,CAAC,EAAE;EAEtB,eAAewC,WAAWA,GAAG;IACzB,IAAIc,QAAQ,EACRA,QAAQ,CAACL,OAAO,CAACvC,KAAK,GAAG,EAAE;IAC/B,IAAI;MACA,IAAI6C,kBAAkB,EAAE;QACpBA,kBAAkB,CAAC,CACf,KAAK,EAAE,KAAK,EAAE,KAAK,EACnB,KAAK,EAAE,KAAK,EAAE,KAAK,EACnB,KAAK,EAAE,KAAK,EAAE,KAAK,CACtB,CAAC;;MAEN,MAAMd,MAAM,GAAG,MAAMb,GAAG,CAACc,YAAY,CAAC;QAAEC,IAAI,EAAEX,YAAY;QAAED,UAAU,EAAEA,UAAU;QAAEa,KAAK,EAAE1C,YAAY;QAAEiB,IAAI,EAAEiB;OAAa,CAAC;MAC7H,IAAIK,MAAM,EAAE;QACR7C,kBAAkB,CAAC6C,MAAM,CAAC9C,YAAY,CAAC;QACvCF,qBAAqB,CAAC,KAAK,CAAC;QAC5B,IAAIwC,SAAS,EACTA,SAAS,EAAE;;KAEtB,CAAC,OAAOY,GAAG,EAAE;MACV9C,iBAAiB,CAAC,IAAI,CAAC;MACvB,IAAIC,kBAAkB,EAClBA,kBAAkB,CAAC,CAAC,CAAC;MACzB,IAAIiC,SAAS,EACTA,SAAS,EAAE;MACfC,YAAY,CAACC,SAAS,GAAG,CAAC,CAAC;MAC3B,IAAIA,SAAS,IAAI,CAAC,EAAE;QAChBD,YAAY,CAAC,CAAC,CAAC;QACftC,kBAAkB,CAAC,KAAK,CAAC;QACzBH,qBAAqB,CAAC,KAAK,CAAC;;;;EAMxC,oBACImB,KAAA,CAAAC,aAAA;IAAQ2C,OAAO,EAAEhB,WAAY;IAAC1B,SAAS,EAAEhB,SAAS,GAAGiB,QAAM,CAAC0C,wBAAwB,GAAG,GAAG,GAAG1C,QAAM,CAAC2C,iBAAiB,GAAG,GAAG,GAAG3C,QAAM,CAAC4C,QAAQ,GACvI5C,QAAM,CAAC6C,yBAAyB,GAAG,GAAG,GAAG7C,QAAM,CAAC2C,iBAAiB,GAAG,GAAG,GAAG3C,QAAM,CAAC4C;KAAU,wDAAiB,CAAC;AAE3H;;;;AC1Ce,SAASE,iBAAiBA,CAAC;EAAE9D,iBAAiB;EAAED,SAAS;EAAEmC,SAAS;EAAErC,kBAAkB;EACnGH,qBAAqB;EAAEO;AAC3B,CAAC,EAAE;EACC,MAAM,CAAC8D,WAAW,EAAEC,iBAAiB,CAAC,GAAGrE,QAAQ,CAAC,CAAC,CAAC;EAEpD,oBACIkB,KAAA,CAAAC,aAAA,2BACID,KAAA,CAAAC,aAAA;IACI2C,OAAO,EAAEA,MAAM;MACXO,iBAAiB,CAACD,WAAW,GAAG,CAAC,CAAC;MAClC,IAAIA,WAAW,IAAI,CAAC,EAAE;QAClB,IAAI9D,kBAAkB,EAClBA,kBAAkB,CAAC,CAAC,CAAC;QACzB+D,iBAAiB,CAAC,CAAC,CAAC;QACpBnE,kBAAkB,CAAC,KAAK,CAAC;QACzBH,qBAAqB,CAAC,KAAK,CAAC;OAC/B,MAAM;QACH,IAAIwC,SAAS,EACTA,SAAS,EAAE;QACflC,iBAAiB,CAAC,IAAI,CAAC;;KAE7B;IACFe,SAAS,EAAEhB,SAAS,GAAGiB,QAAM,CAACiD,wBAAwB,GAAGjD,QAAM,CAACkD;GAA4B,CAC/F,CAAC;AAEd;;;;ACpBe,SAASC,WAAWA,CAAC;EAAEtC,GAAG;EAAEnC,qBAAqB;EAAEqC,cAAc;EAC5EwB,QAAQ;EAAExD,SAAS;EAAEkC,YAAY;EAAEH,kBAAkB;EAAEjC,kBAAkB;EAAEJ,eAAe;EAC1F4C;AACJ,CAAC,EAAE;EAAA,IAAA+B,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EACC,MAAM,CAAClC,SAAS,EAAED,YAAY,CAAC,GAAGxC,QAAQ,CAAC,CAAC,CAAC;EAE7C,MAAM,CAACO,QAAQ,EAAEqE,cAAc,CAAC,GAAG5E,QAAQ,CAAC,EAAE,CAAC;EAC/C,MAAM,CAACQ,YAAY,EAAEF,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAEtD6C,SAAS,CAAC,MAAM;IACZxC,iBAAiB,EAAE;IACnBH,kBAAkB,CAAC,KAAK,CAAC;GAC5B,EAAE,EAAE,CAAC;EAEN,eAAeG,iBAAiBA,GAAG;IAC/B,IAAIP,eAAe,EAAE;MACjB,MAAMiD,MAAM,GAAG,MAAMb,GAAG,CAAC2C,UAAU,CAAC,MAAM,CAAC;MAC3C,IAAI9B,MAAM,EAAE;QACR6B,cAAc,CAAC7B,MAAM,CAACxC,QAAQ,CAAC;;;;EAK3C,oBACIW,KAAA,CAAAC,aAAA,2BACID,KAAA,CAAAC,aAAA;IACIC,SAAS,EAAEC,QAAM,CAACyD,UAAW;IAC7BC,GAAG,GAAAN,qBAAA,GAAElE,QAAQ,CAACC,YAAY,CAAC,cAAAiE,qBAAA,uBAAtBA,qBAAA,CAAwBO;GAChC,CAAC,eACF9D,KAAA,CAAAC,aAAA,2BACID,KAAA,CAAAC,aAAA,CAAChB,aAAa;IAACC,SAAS,EAAEA,SAAU;IAChCC,iBAAiB,EAAEA,iBAAkB;IACrCE,QAAQ,EAAEA,QAAS;IACnBD,kBAAkB,EAAEA;GAAqB,CAC5C,CAAC,eACNY,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAAC4D;kBACnB/D,KAAA,CAAAC,aAAA,CAACgD,iBAAiB;IACd7D,kBAAkB,EAAEA,kBAAmB;IAACD,iBAAiB,EAAEA,iBAAkB;IAC7ED,SAAS,EAAEA,SAAU;IACrBL,qBAAqB,EAAEA,qBAAsB;IAC7CG,kBAAkB,EAAEA;GACvB,CACA,CAAC,eACNgB,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAAC6D;kBACnBhE,KAAA,CAAAC,aAAA,CAACc,YAAY;IAAC7B,SAAS,EAAEA,SAAU;IAAC+B,kBAAkB,EAAEA,kBAAmB;IACvED,GAAG,EAAEA,GAAI;IAACG,UAAU,EAAE,EAAAqC,sBAAA,GAACnE,QAAQ,CAACC,YAAY,CAAC,cAAAkE,sBAAA,uBAAtBA,sBAAA,CAAwBS,SAAS,CAAE;IAC1DpF,qBAAqB,EAAEA,qBAAsB;IAC7CM,iBAAiB,EAAEA,iBAAkB;IACrCH,kBAAkB,EAAEA,kBAAmB;IACvCkC,cAAc,EAAEA,cAAe;IAC/B9B,kBAAkB,EAAEA,kBAAmB;IACvCgC,YAAY,EAAEA,YAAa;IAC3BE,YAAY,EAAEA,YAAa;IAC3BC,SAAS,EAAEA,SAAU;IACrBC,WAAW,EAAEA;GAChB,CAAC,eACFxB,KAAA,CAAAC,aAAA,CAACwC,iBAAiB;IAACvD,SAAS,EAAEA,SAAU;IAACkC,YAAY,EAAEA,YAAa;IAChEJ,GAAG,EAAEA,GAAI;IAACG,UAAU,EAAE,EAAAsC,sBAAA,GAACpE,QAAQ,CAACC,YAAY,CAAC,cAAAmE,sBAAA,uBAAtBA,sBAAA,CAAwBQ,SAAS,CAAE;IAC1DpF,qBAAqB,EAAEA,qBAAsB;IAC7CM,iBAAiB,EAAEA,iBAAkB;IACrCH,kBAAkB,EAAEA,kBAAmB;IACvCI,kBAAkB,EAAEA,kBAAmB;IACvCsD,QAAQ,EAAEA,QAAS;IACnBpB,YAAY,EAAEA,YAAa;IAC3BC,SAAS,EAAEA,SAAU;IACrBC,WAAW,EAAEA;GAChB,CACA,CAEJ,CAAC;AAEd;;AChFA,MAAM0C,MAAM,GAAG;EAAEC,WAAW,EAAG;AAA6B,CAAC;;ACC7D,MAAMC,iBAAiB,CAAC;EAEpB,MAAMC,WAAWA,CAACC,OAAO,EAAEC,KAAK,GAAG,IAAI,EAAEC,OAAO,EAAE;IAC9C,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAE,GAAET,MAAM,CAACC,WAAY,IAAGG,OAAQ,EAAC,EAAEC,KAAK,CAAC;MAC5E,OAAOE,QAAQ,CAACG,IAAI;KACvB,CAAC,OAAOC,KAAK,EAAE;MACZ,MAAM,IAAIC,KAAK,CAAE,gCAA+BD,KAAK,CAACE,OAAQ,EAAC,CAAC;;;EAIxE,MAAMC,UAAUA,CAACV,OAAO,EAAEC,KAAK,GAAG,IAAI,EAAE;IACpC,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACO,GAAG,CAAE,GAAEf,MAAM,CAACC,WAAY,IAAGG,OAAQ,EAAC,EAAEC,KAAK,CAAC;MAC3E,OAAOE,QAAQ,CAACG,IAAI;KACvB,CAAC,OAAOC,KAAK,EAAE;MACZ,MAAM,IAAIC,KAAK,CAAE,gCAA+BD,KAAK,CAACE,OAAQ,EAAC,CAAC;;;EAKxE,MAAMpB,UAAUA,CAACpD,IAAI,EAAE;IACnB,MAAMsB,MAAM,GAAG,MAAM,IAAI,CAACwC,WAAW,CAAE,UAAS,EAAE;MAAE9D,IAAI,EAAEA;KAAO,CAAC;IAClE,IAAIsB,MAAM,EAAE,OAAOA,MAAM;;EAG7B,MAAMqD,eAAeA,GAAG;IACpB,MAAMrD,MAAM,GAAG,MAAM,IAAI,CAACmD,UAAU,CAAE,QAAO,CAAC;IAC9C,IAAInD,MAAM,EAAE,OAAOA,MAAM;;EAG7B,MAAMC,YAAYA,CAACqD,GAAG,EAAE;IACpB,IAAItD,MAAM,GAAG,IAAI;IACjB,IAAIsD,GAAG,CAACnD,KAAK,EACTH,MAAM,GAAG,MAAM,IAAI,CAACwC,WAAW,CAAE,gBAAe,EAAEc,GAAG,EAAE,IAAI,CAAC,CAAC,KAE7DtD,MAAM,GAAG,MAAM,IAAI,CAACwC,WAAW,CAAE,gBAAe,EAAEc,GAAG,EAAE,IAAI,CAAC;IAChE,IAAItD,MAAM,EAAE,OAAOA,MAAM;;AAgBjC;;;;;;ACnDe,SAASuD,WAAWA,CAAC;EAAElG;AAAU,CAAC,EAAE;EAE/C,oBACIc,KAAA,CAAAC,aAAA,2BACID,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAACkF;GAAmB,CAAC,eAC3CrF,KAAA,CAAAC,aAAA;IAAMC,SAAS,EAAEhB,SAAS,GAAGiB,QAAM,CAACmF,iCAAiC,GAAGnF,QAAM,CAACoF;KAAoC,+DAAiB,CACnI,CAAC;AAEd;;;;ACRe,SAASC,eAAeA,CAAC;EAAEtG,SAAS;EAAEL;AAAsB,CAAC,EAAE;EAE1E,SAAS4G,oBAAoBA,GAAG;IAC5B5G,qBAAqB,CAAC,KAAK,CAAC;;EAGhC,oBACImB,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAACuF,qBAAqB,GAAG,GAAG,GAAGvF,QAAM,CAAC4C;kBACxD/C,KAAA,CAAAC,aAAA;IACI2C,OAAO,EAAE6C,oBAAqB;IAC9BvF,SAAS,EAAEhB,SAAS,GAAGiB,QAAM,CAACwF,sBAAsB,GAC9CxF,QAAM,CAACyF;GAChB,CACA,CAAC;AAEd;;;;ACTe,SAAStC,aAAWA,CAAC;EAAEtC,GAAG;EAAEnC,qBAAqB;EAAEqC,cAAc;EAC5EwB,QAAQ;EAAExD,SAAS;EAAEkC,YAAY;EAAEH,kBAAkB;EAAEjC,kBAAkB;EACzEwC;AACJ,CAAC,EAAE;EAAA,IAAA+B,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EACC,MAAM,CAAClC,SAAS,EAAED,YAAY,CAAC,GAAGxC,QAAQ,CAAC,CAAC,CAAC;EAE7C,MAAM,CAACO,QAAQ,EAAEqE,cAAc,CAAC,GAAG5E,QAAQ,CAAC,EAAE,CAAC;EAC/C,MAAM,CAACQ,YAAY,EAAEF,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAEtD6C,SAAS,CAAC,MAAM;IACZxC,iBAAiB,EAAE;IACnBH,kBAAkB,CAAC,KAAK,CAAC;GAC5B,EAAE,EAAE,CAAC;EAEN,eAAeG,iBAAiBA,GAAG;IAC/B,MAAM0C,MAAM,GAAG,MAAMb,GAAG,CAAC2C,UAAU,CAAC,MAAM,CAAC;IAC3C,IAAI9B,MAAM,EAAE;MACR6B,cAAc,CAAC7B,MAAM,CAACxC,QAAQ,CAAC;;;EAIvC,oBACIW,KAAA,CAAAC,aAAA,2BACID,KAAA,CAAAC,aAAA;IACIC,SAAS,EAAEC,QAAM,CAACyD,UAAW;IAC7BC,GAAG,GAAAN,qBAAA,GAAElE,QAAQ,CAACC,YAAY,CAAC,cAAAiE,qBAAA,uBAAtBA,qBAAA,CAAwBO;GAChC,CAAC,eACF9D,KAAA,CAAAC,aAAA,2BACID,KAAA,CAAAC,aAAA,CAAChB,aAAa;IAACC,SAAS,EAAEA,SAAU;IAChCC,iBAAiB,EAAEA,iBAAkB;IACrCC,kBAAkB,EAAEA,kBAAmB;IACvCC,QAAQ,EAAEA;GAAW,CAExB,CAAC,eACNW,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAAC4D;kBACnB/D,KAAA,CAAAC,aAAA,CAACgD,iBAAiB;IACd7D,kBAAkB,EAAEA,kBAAmB;IAACD,iBAAiB,EAAEA,iBAAkB;IAC7ED,SAAS,EAAEA,SAAU;IACrBL,qBAAqB,EAAEA,qBAAsB;IAC7CG,kBAAkB,EAAEA;GACvB,CACA,CAAC,eACNgB,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAAC6D;kBACnBhE,KAAA,CAAAC,aAAA,CAACc,YAAY;IAAC7B,SAAS,EAAEA,SAAU;IAAC+B,kBAAkB,EAAEA,kBAAmB;IACvED,GAAG,EAAEA,GAAI;IAACG,UAAU,EAAE,EAAAqC,sBAAA,GAACnE,QAAQ,CAACC,YAAY,CAAC,cAAAkE,sBAAA,uBAAtBA,sBAAA,CAAwBS,SAAS,CAAE;IAC1DpF,qBAAqB,EAAEA,qBAAsB;IAC7CM,iBAAiB,EAAEA,iBAAkB;IACrCH,kBAAkB,EAAEA,kBAAmB;IACvCkC,cAAc,EAAEA,cAAe;IAC/B9B,kBAAkB,EAAEA,kBAAmB;IACvCgC,YAAY,EAAEA,YAAa;IAC3B9B,YAAY,EAAEA,YAAa;IAC3BgC,YAAY,EAAEA,YAAa;IAC3BC,SAAS,EAAEA,SAAU;IACrBC,WAAW,EAAEA;GAChB,CAAC,eACFxB,KAAA,CAAAC,aAAA,CAACwC,iBAAiB;IAACvD,SAAS,EAAEA,SAAU;IAACkC,YAAY,EAAEA,YAAa;IAChEJ,GAAG,EAAEA,GAAI;IAACG,UAAU,EAAE,EAAAsC,sBAAA,GAACpE,QAAQ,CAACC,YAAY,CAAC,cAAAmE,sBAAA,uBAAtBA,sBAAA,CAAwBQ,SAAS,CAAE;IAC1DpF,qBAAqB,EAAEA,qBAAsB;IAC7CM,iBAAiB,EAAEA,iBAAkB;IACrCH,kBAAkB,EAAEA,kBAAmB;IACvCI,kBAAkB,EAAEA,kBAAmB;IACvCsD,QAAQ,EAAEA,QAAS;IACnBpD,YAAY,EAAEA,YAAa;IAC3BgC,YAAY,EAAEA,YAAa;IAC3BC,SAAS,EAAEA,SAAU;IACrBC,WAAW,EAAEA;GAChB,CACA,CAEJ,CAAC;AAEd;;;;;;AC/Ee,SAASqE,eAAeA,CAAC;EAAEC,SAAS;EAAE5G;AAAU,CAAC,EAAE;EAE9D,oBACIc,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEhB,SAAS,GAAGiB,QAAM,CAAC4F,0BAA0B,GAAG5F,QAAM,CAAC6F,2BAA4B;IAACpD,OAAO,EAAEA,MAAMkD,SAAS;GAAS,CAAC;AAE9I;;ACCe,SAASG,YAAYA,CAAC;EAAEjF,GAAG;EAAEnC,qBAAqB;EAAEqC,cAAc;EAC7EwB,QAAQ;EAAExD,SAAS;EAAEkC,YAAY;EAAEH,kBAAkB;EAAEjC,kBAAkB;EACzEwC;AACJ,CAAC,EAAE;EAEC,MAAM,CAACnC,QAAQ,EAAEqE,cAAc,CAAC,GAAG5E,QAAQ,CAAC,EAAE,CAAC;EAC/C,MAAM,CAACoH,cAAc,EAAEC,iBAAiB,CAAC,GAAGrH,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACyC,SAAS,EAAED,YAAY,CAAC,GAAGxC,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAMsH,WAAW,GAAG1E,MAAM,EAAE;EAE5BC,SAAS,CAAC,MAAM;IACZxC,iBAAiB,EAAE;IACnBH,kBAAkB,CAAC,KAAK,CAAC;GAE5B,EAAE,EAAE,CAAC;EAEN,eAAeG,iBAAiBA,CAACkH,KAAK,EAAE;IACpC,MAAMxE,MAAM,GAAG,MAAMb,GAAG,CAAC2C,UAAU,CAAC,OAAO,CAAC;IAC5C,IAAI9B,MAAM,EAAE;MACR6B,cAAc,CAAC7B,MAAM,CAACxC,QAAQ,CAAC,CAAC,CAAC,CAAC;MAClC,IAAIgH,KAAK,EAAE;QACP,IAAI,CAACH,cAAc,EAAE;UACjBC,iBAAiB,CAAC,IAAI,CAAC;UACvBG,UAAU,CAAC,MAAMH,iBAAiB,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;;;;;EAMhE,SAAS9E,SAASA,GAAG;IACjB,IAAI+E,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAE/D,OAAO,EAAE;MACtB+D,WAAW,CAAC/D,OAAO,CAACkE,KAAK,EAAE;MAC3BH,WAAW,CAAC/D,OAAO,CAACmE,WAAW,GAAG,CAAC;;;EAM3C,SAASV,SAASA,GAAG;IACjB,IAAIM,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAE/D,OAAO,EAAE;MACtB+D,WAAW,CAAC/D,OAAO,CAACoE,IAAI,EAAE;;;EAIlC,oBACIzG,KAAA,CAAAC,aAAA,2BACID,KAAA,CAAAC,aAAA;IACI4D,GAAG,EAAExE,QAAQ,CAACyE,IAAK;IACnB5B,GAAG,EAAEkE;GAED,CAAC,eACTpG,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAAC4D;kBACnB/D,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAACuG;kBACnB1G,KAAA,CAAAC,aAAA,CAACgD,iBAAiB;IACd/D,SAAS,EAAEA,SAAU;IACrBkH,WAAW,EAAEA,WAAY;IACzBjH,iBAAiB,EAAEA,iBAAkB;IACrCkC,SAAS,EAAEA;GACd,CACA,CAAC,eACNrB,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAACuG,WAAW,GAAG,GAAG,GAAGvG,QAAM,CAACwG;kBAC9C3G,KAAA,CAAAC,aAAA,CAAC4F,eAAe;IAACC,SAAS,EAAEA,SAAU;IAAC5G,SAAS,EAAEA;GAAY,CAC7D,CACJ,CAAC,eACNc,KAAA,CAAAC,aAAA;IAAMC,SAAS,EAAEhB,SAAS,GAAGiB,QAAM,CAACyG,aAAa,GAC3CzG,QAAM,CAAC0G;KAAgBX,cAAc,GAAG,0BAA0B,GAAG,mBAA0B,CAAC,eACtGlG,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAAC6D;kBACnBhE,KAAA,CAAAC,aAAA,CAACc,YAAY;IAAC7B,SAAS,EAAEA,SAAU;IAAC+B,kBAAkB,EAAEA,kBAAmB;IACvED,GAAG,EAAEA,GAAI;IAACG,UAAU,EAAE,CAAC9B,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAE4E,SAAS,CAAE;IAC5CpF,qBAAqB,EAAEA,qBAAsB;IAC7CM,iBAAiB,EAAEA,iBAAkB;IACrCH,kBAAkB,EAAEA,kBAAmB;IACvCkC,cAAc,EAAEA,cAAe;IAC/BI,YAAY,EAAEA,YAAa;IAC3BC,SAAS,EAAEA,SAAU;IACrBF,SAAS,EAAEA,SAAU;IACrBG,WAAW,EAAEA,WAAY;IACzBJ,YAAY,EAAEA;GACjB,CAAC,eACFpB,KAAA,CAAAC,aAAA,CAACwC,iBAAiB;IAACvD,SAAS,EAAEA,SAAU;IAACkC,YAAY,EAAEA,YAAa;IAChEJ,GAAG,EAAEA,GAAI;IAACG,UAAU,EAAE,CAAC9B,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAE4E,SAAS,CAAE;IAC5CpF,qBAAqB,EAAEA,qBAAsB;IAC7CM,iBAAiB,EAAEA,iBAAkB;IACrCH,kBAAkB,EAAEA,kBAAmB;IACvC0D,QAAQ,EAAEA,QAAS;IACnBpB,YAAY,EAAEA,YAAa;IAC3BC,SAAS,EAAEA,SAAU;IACrBF,SAAS,EAAEA;GACd,CACA,CAEJ,CAAC;AAEd;;;;AC5Fe,SAASyF,YAAYA,CAAC;EAAE9F,GAAG;EAAEnC,qBAAqB;EAAEqC,cAAc;EAC7EwB,QAAQ;EAAExD,SAAS;EAAEkC,YAAY;EAAEH,kBAAkB;EAAEjC,kBAAkB;EACzEwC;AACJ,CAAC,EAAE;EACC,MAAM,CAACD,SAAS,EAAED,YAAY,CAAC,GAAGxC,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACO,QAAQ,EAAEqE,cAAc,CAAC,GAAG5E,QAAQ,CAAC,EAAE,CAAC;EAC/C,MAAM,CAACQ,YAAY,EAAEF,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EACtD,MAAM,CAACiI,mBAAmB,EAAEC,qBAAqB,CAAC,GAAGlI,QAAQ,CAAC,EAAE,CAAC;EACjE,MAAM,CAACmI,cAAc,EAAEC,gBAAgB,CAAC,GAAGpI,QAAQ,CAAC,EAAE,CAAC;EACvD,MAAM,CAACqI,YAAY,EAAExE,kBAAkB,CAAC,GAAG7D,QAAQ,CAAC,CAChD,KAAK,EAAE,KAAK,EAAE,KAAK,EACnB,KAAK,EAAE,KAAK,EAAE,KAAK,EACnB,KAAK,EAAE,KAAK,EAAE,KAAK,CACtB,CAAC;EAEF,MAAM,CAACoH,cAAc,EAAEC,iBAAiB,CAAC,GAAGrH,QAAQ,CAAC,IAAI,CAAC;EAE1D6C,SAAS,CAAC,MAAM;IACZxC,iBAAiB,EAAE;IACnBH,kBAAkB,CAAC,KAAK,CAAC;GAC5B,EAAE,EAAE,CAAC;EAEN,eAAeG,iBAAiBA,CAACkH,KAAK,EAAE;IACpCF,iBAAiB,CAAC,IAAI,CAAC;IACvBe,gBAAgB,CAAC,EAAE,CAAC;IACpB,MAAMrF,MAAM,GAAG,MAAMb,GAAG,CAAC2C,UAAU,CAAC,OAAO,CAAC;IAC5C,IAAI9B,MAAM,EAAE;MACR6B,cAAc,CAAC7B,MAAM,CAACxC,QAAQ,CAAC;MAC/B8G,iBAAiB,CAAC,KAAK,CAAC;;;EAKhC,SAASiB,kBAAkBA,CAACpF,KAAK,EAAE;IAC/B,MAAMqF,YAAY,GAAGN,mBAAmB,CAACO,OAAO,CAACtF,KAAK,CAAC;IACvD,MAAMuF,eAAe,GAAG,CAAC,GAAGJ,YAAY,CAAC;IACzC,IAAIE,YAAY,IAAI,CAAC,EAAE;MACnBL,qBAAqB,CAAC,CAAC,GAAGD,mBAAmB,CAAC,CAACS,MAAM,CAAC,UAAUC,IAAI,EAAE;QAClE,OAAOA,IAAI,KAAKzF,KAAK;OACxB,CAAC,CAAC;MAEHkF,gBAAgB,CAAC,CAAC,GAAGD,cAAc,CAAC,CAACO,MAAM,CAAC,CAACE,IAAI,EAAEC,CAAC,KAAK;QACrD,OAAOtI,QAAQ,CAAC2C,KAAK,CAAC,CAACiC,SAAS,KAAKyD,IAAI;OAC5C,CAAC,CAAC;MACHH,eAAe,CAACvF,KAAK,CAAC,GAAG,KAAK;MAC9BW,kBAAkB,CAAC4E,eAAe,CAAC;KACtC,MAAM;MACHP,qBAAqB,CAAC,CAAC,GAAGD,mBAAmB,EAAE/E,KAAK,CAAC,CAAC;MACtDkF,gBAAgB,CAAC,CAAC,GAAGD,cAAc,EAAE5H,QAAQ,CAAC2C,KAAK,CAAC,CAACiC,SAAS,CAAC,CAAC;MAChEsD,eAAe,CAACvF,KAAK,CAAC,GAAG,IAAI;MAC7BW,kBAAkB,CAAC4E,eAAe,CAAC;;;EAI3C,oBACIvH,KAAA,CAAAC,aAAA,2BACID,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAACyH;kBACnB5H,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEhB,SAAS,GAAGiB,QAAM,CAAC0H,gBAAgB,GAAG,GAAG,GAAG1H,QAAM,CAAC2H,cAAc,GAAG3H,QAAM,CAAC0H,gBAAgB,GAAG,GAAG,GAAG1H,QAAM,CAAC4H;KACtH1I,QAAQ,CAAC2I,GAAG,CAAC,CAACC,OAAO,EAAEjG,KAAK,kBACzBhC,KAAA,CAAAC,aAAA;IAAK2C,OAAO,EAAEA,MAAM;MAAEwE,kBAAkB,CAACpF,KAAK,CAAC;KAAG;IAACI,GAAG,EAAEJ,KAAM;IAC1D9B,SAAS,EAAGhB,SAAS,GAAGiB,QAAM,CAAC+H,cAAc,GAAG,GAAG,IAAIf,YAAY,CAACnF,KAAK,CAAC,GAAG7B,QAAM,CAACgI,iBAAiB,GAAG,EAAE,CAAC,GACrGhI,QAAM,CAACiI,eAAe,GAAG,GAAG,IAAIjB,YAAY,CAACnF,KAAK,CAAC,GAAG7B,QAAM,CAACkI,kBAAkB,GAAG,EAAE,CAAG;IAC7FC,KAAK,EAAE;MAAEC,OAAO,EAAG,OAAMN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEnE,IAAK;;GACrC,CACV,CACC,CACJ,CAAC,eACN9D,KAAA,CAAAC,aAAA;IAAGC,SAAS,EAAEhB,SAAS,GAAGiB,QAAM,CAACyG,aAAa,GACxCzG,QAAM,CAAC0G;KAAgBX,cAAc,GAAG,yBAAyB,GAAG,qCAAyC,CAAC,eACpHlG,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAAC4D;kBACnB/D,KAAA,CAAAC,aAAA,CAACgD,iBAAiB;IACd7D,kBAAkB,EAAEA,kBAAmB;IAACD,iBAAiB,EAAEA,iBAAkB;IAC7ED,SAAS,EAAEA,SAAU;IACrBL,qBAAqB,EAAEA,qBAAsB;IAC7CG,kBAAkB,EAAEA;GACvB,CACA,CAAC,eACNgB,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAAC6D;kBACnBhE,KAAA,CAAAC,aAAA,CAACwC,iBAAiB;IAACvD,SAAS,EAAEA,SAAU;IAACkC,YAAY,EAAEA,YAAa;IAChEJ,GAAG,EAAEA,GAAI;IAACG,UAAU,EAAE8F,cAAe;IACrCpI,qBAAqB,EAAEA,qBAAsB;IAC7CM,iBAAiB,EAAEA,iBAAkB;IACrCH,kBAAkB,EAAEA,kBAAmB;IACvCI,kBAAkB,EAAEA,kBAAmB;IACvCsD,QAAQ,EAAEA,QAAS;IACnBpD,YAAY,EAAEA,YAAa;IAC3BgC,YAAY,EAAEA,YAAa;IAC3BC,SAAS,EAAEA,SAAU;IACrBC,WAAW,EAAEA,WAAY;IACzBmB,kBAAkB,EAAEA;GACvB,CACA,CAEH,CAAC;AAEf;;;;ACjGe,SAAS6F,YAAYA,CAAC;EAAExH,GAAG;EAAEnC,qBAAqB;EAAEqC,cAAc;EAC7EwB,QAAQ;EAAExD,SAAS;EAAEkC,YAAY;EAAEH,kBAAkB;EAAEjC,kBAAkB;EACzEwC;AACJ,CAAC,EAAE;EAAA,IAAA+B,qBAAA,EAAAC,sBAAA;EACC,MAAM,CAACjC,SAAS,EAAED,YAAY,CAAC,GAAGxC,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACO,QAAQ,EAAEqE,cAAc,CAAC,GAAG5E,QAAQ,CAAC,EAAE,CAAC;EAC/C,MAAM,CAAC2J,QAAQ,EAAEC,WAAW,CAAC,GAAG5J,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAM,CAACQ,YAAY,EAAEF,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAEtD,MAAM,CAACoH,cAAc,EAAEC,iBAAiB,CAAC,GAAGrH,QAAQ,CAAC,IAAI,CAAC;EAE1D6C,SAAS,CAAC,MAAM;IACZxC,iBAAiB,EAAE;IACnBH,kBAAkB,CAAC,KAAK,CAAC;GAC5B,EAAE,EAAE,CAAC;EAEN,eAAeG,iBAAiBA,CAACkH,KAAK,EAAE;IACpCF,iBAAiB,CAAC,IAAI,CAAC;IACvB,MAAMtE,MAAM,GAAG,MAAMb,GAAG,CAAC2C,UAAU,CAAC,OAAO,CAAC;IAC5C,IAAI9B,MAAM,EAAE;MACR6B,cAAc,CAAC7B,MAAM,CAACxC,QAAQ,CAAC;MAC/BqJ,WAAW,CAAC7G,MAAM,CAACxC,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC/B8G,iBAAiB,CAAC,KAAK,CAAC;;;EAIhC,MAAMwC,WAAW,GAAIC,KAAK,IAAK;IAC3B,IAAI5G,KAAK,GAAG1C,YAAY,GAAGsJ,KAAK;IAChC,IAAI5G,KAAK,GAAG,CAAC,EACTA,KAAK,GAAG3C,QAAQ,CAACwB,MAAM,GAAG,CAAC,CAAC,KAC3B,IAAImB,KAAK,GAAG3C,QAAQ,CAACwB,MAAM,GAAG,CAAC,EAChCmB,KAAK,GAAG,CAAC;IACb5C,kBAAkB,CAAC4C,KAAK,CAAC;GAC5B;EAED,oBACIhC,KAAA,CAAAC,aAAA,cACK,CAACiG,cAAc,iBAAIlG,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAACyH,SAAS,GAAG,GAAG,GAAGzH,QAAM,CAAC4C;kBAChE/C,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEhB,SAAS,GAAGiB,QAAM,CAAC0H,gBAAgB,GAAG,GAAG,GAAG1H,QAAM,CAAC2H,cAAc,GAAG3H,QAAM,CAAC0H,gBAAgB,GAAG,GAAG,GAAG1H,QAAM,CAAC4H;kBACvH/H,KAAA,CAAAC,aAAA;IACIC,SAAS,EAAGhB,SAAS,GAAGiB,QAAM,CAAC+H,cAAc,GAAG/H,QAAM,CAACiI,eAAiB;IACxEE,KAAK,EAAE;MAAEC,OAAO,EAAG,OAAME,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAE3E,IAAK;;GAC3C,CAAC,eAEF9D,KAAA,CAAAC,aAAA;IACIC,SAAS,EAAGhB,SAAS,GAAGiB,QAAM,CAAC+H,cAAc,GAAG/H,QAAM,CAACiI,eAAiB;IACxEE,KAAK,EAAE;MAAEO,UAAU,EAAG,OAAI,CAAAtF,qBAAA,GAAElE,QAAQ,CAACC,YAAY,CAAC,cAAAiE,qBAAA,uBAAtBA,qBAAA,CAAwBO,IAAK;;kBAEzD9D,KAAA,CAAAC,aAAA;IACI2C,OAAO,EAAEA,MAAM+F,WAAW,CAAC,CAAC,CAAC,CAAE;IAC/BzI,SAAS,EAAEhB,SAAS,GAAGiB,QAAM,CAAC2I,mBAAmB,GAAG,GAAG,GAAG3I,QAAM,CAAC4I,iBAAiB,GAC5E5I,QAAM,CAAC6I,oBAAoB,GAAG,GAAG,GAAG7I,QAAM,CAAC8I;GAAqB,CAAC,eAC3EjJ,KAAA,CAAAC,aAAA;IACI2C,OAAO,EAAEA,MAAM+F,WAAW,CAAC,CAAC,CAAE;IAC9BzI,SAAS,EAAEhB,SAAS,GAAGiB,QAAM,CAAC2I,mBAAmB,GAAG,GAAG,GAAG3I,QAAM,CAAC+I,kBAAkB,GAC7E/I,QAAM,CAAC6I,oBAAoB,GAAG,GAAG,GAAG7I,QAAM,CAACgJ;GAAsB,CAC1E,CACJ,CACJ,CAAC,eACNnJ,KAAA,CAAAC,aAAA;IAAGC,SAAS,EAAEhB,SAAS,GAAGiB,QAAM,CAACyG,aAAa,GAAG,GAAG,GAAGzG,QAAM,CAAC4C,QAAQ,GAChE5C,QAAM,CAAC0G,aAAa,GAAG,GAAG,GAAG1G,QAAM,CAAC4C;KAAWmD,cAAc,GAAG,yBAAyB,GAAG,kCAAsC,CAAC,eACzIlG,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAAC4D,qBAAqB,GAAG,GAAG,GAAG5D,QAAM,CAAC4C;kBACxD/C,KAAA,CAAAC,aAAA,CAACgD,iBAAiB;IACd7D,kBAAkB,EAAEA,kBAAmB;IAACD,iBAAiB,EAAEA,iBAAkB;IAC7ED,SAAS,EAAEA,SAAU;IACrBL,qBAAqB,EAAEA,qBAAsB;IAC7CG,kBAAkB,EAAEA;GACvB,CACA,CAAC,eACNgB,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAAC6D,eAAe,GAAG,GAAG,GAAG7D,QAAM,CAAC4C;kBAClD/C,KAAA,CAAAC,aAAA,CAACwC,iBAAiB;IAACvD,SAAS,EAAEA,SAAU;IAACkC,YAAY,EAAEA,YAAa;IAChEJ,GAAG,EAAEA,GAAI;IAACG,UAAU,EAAE,EAAAqC,sBAAA,GAACnE,QAAQ,CAACC,YAAY,CAAC,cAAAkE,sBAAA,uBAAtBA,sBAAA,CAAwBS,SAAS,CAAE;IAC1DpF,qBAAqB,EAAEA,qBAAsB;IAC7CM,iBAAiB,EAAEA,iBAAkB;IACrCH,kBAAkB,EAAEA,kBAAmB;IACvCI,kBAAkB,EAAEA,kBAAmB;IACvCsD,QAAQ,EAAEA,QAAS;IACnBpB,YAAY,EAAEA,YAAa;IAC3BC,SAAS,EAAEA,SAAU;IACrBC,WAAW,EAAEA;GAChB,CACA,CAEH,CAAC;AAEf;;AC3Ee,SAAS4H,cAAcA,CAAC;EAAEvK,qBAAqB;EAAED,eAAe;EAAEI,kBAAkB;EAAEwC;AAAY,CAAC,EAAE;EAChH,SAAS6H,YAAYA,GAAG;IACpB,OAAOC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,GAAG,IAAI,GAAG,KAAK;;EAGhE,MAAMxI,GAAG,GAAG,IAAIoD,iBAAiB,EAAE;EAEnC,MAAM,CAAClF,SAAS,EAAEuK,eAAe,CAAC,GAAG3K,QAAQ,CAACuK,YAAY,EAAE,CAAC;EAE7D,MAAM,CAACjI,YAAY,EAAEH,kBAAkB,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EACvD,MAAM,CAAC4D,QAAQ,EAAExB,cAAc,CAAC,GAAGpC,QAAQ,CAAC,IAAI,CAAC;EACjD,MAAM,CAAC4K,cAAc,EAAEC,kBAAkB,CAAC,GAAG7K,QAAQ,CAAC,KAAK,CAAC;EAE5D6C,SAAS,CAAC,MAAM;IACZ,eAAeiI,QAAQA,GAAG;MACtB,MAAM/H,MAAM,GAAG,MAAMb,GAAG,CAACkE,eAAe,EAAE;MAC1C,IAAIrD,MAAM,EAAE;QAER8H,kBAAkB,CAAC,IAAI,CAAC;;;IAGhCC,QAAQ,EAAE;GACb,EAAE,EAAE,CAAC;EAENN,MAAM,CAACO,QAAQ,GAAG,YAAY;IAC1BJ,eAAe,CAACJ,YAAY,EAAE,CAAC;GAClC;EAED,oBACIrJ,KAAA,CAAAC,aAAA,cAAK,GAAC,EACFrB,eAAe,gBACXoB,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEC,QAAM,CAAC2J;kBACnB9J,KAAA,CAAAC,aAAA;IAAKC,SAAS,EAAEhB,SAAS,GAAGiB,QAAM,CAAC4J,uBAAuB,GAAG5J,QAAM,CAAC6J;kBAChEhK,KAAA,CAAAC,aAAA,CAACuF,eAAe;IAACtG,SAAS,EAAEA,SAAU;IAACL,qBAAqB,EAAEA;GAAwB,CAAC,EACtF6K,cAAc,GAAGlI,WAAW,KAAK,MAAM,gBAAGxB,KAAA,CAAAC,aAAA,CAACqD,WAAW;IACnDzE,qBAAqB,EAAEA,qBAAsB;IAC7CK,SAAS,EAAEA,SAAU;IACrBkC,YAAY,EAAEA,YAAa;IAC3BH,kBAAkB,EAAEA,kBAAmB;IACvCjC,kBAAkB,EAAEA,kBAAmB;IACvC0D,QAAQ,EAAEA,QAAS;IACnBxB,cAAc,EAAEA,cAAe;IAC/BF,GAAG,EAAEA,GAAI;IACTQ,WAAW,EAAEA,WAAY;IACzB5C,eAAe,EAAEA;GACpB,CAAC,GACI4C,WAAW,KAAK,MAAM,gBACpBxB,KAAA,CAAAC,aAAA,CAACgK,aAAW;IAACpL,qBAAqB,EAAEA,qBAAsB;IACtDK,SAAS,EAAEA,SAAU;IACrBkC,YAAY,EAAEA,YAAa;IAC3BH,kBAAkB,EAAEA,kBAAmB;IACvCjC,kBAAkB,EAAEA,kBAAmB;IACvC0D,QAAQ,EAAEA,QAAS;IACnBxB,cAAc,EAAEA,cAAe;IAC/BF,GAAG,EAAEA,GAAI;IACTQ,WAAW,EAAEA;GAEhB,CAAC,GACAA,WAAW,KAAK,OAAO,gBACrBxB,KAAA,CAAAC,aAAA,CAACgG,YAAY;IAACpH,qBAAqB,EAAEA,qBAAsB;IACvDK,SAAS,EAAEA,SAAU;IACrBkC,YAAY,EAAEA,YAAa;IAC3BH,kBAAkB,EAAEA,kBAAmB;IACvCjC,kBAAkB,EAAEA,kBAAmB;IACvC0D,QAAQ,EAAEA,QAAS;IACnBxB,cAAc,EAAEA,cAAe;IAC/BF,GAAG,EAAEA,GAAI;IACTQ,WAAW,EAAEA;GAChB,CAAC,GACAA,WAAW,KAAK,OAAO,gBACrBxB,KAAA,CAAAC,aAAA,CAAC6G,YAAY;IACTjI,qBAAqB,EAAEA,qBAAsB;IAC7CK,SAAS,EAAEA,SAAU;IACrBkC,YAAY,EAAEA,YAAa;IAC3BH,kBAAkB,EAAEA,kBAAmB;IACvCjC,kBAAkB,EAAEA,kBAAmB;IACvC0D,QAAQ,EAAEA,QAAS;IACnBxB,cAAc,EAAEA,cAAe;IAC/BF,GAAG,EAAEA,GAAI;IACTQ,WAAW,EAAEA;GAChB,CAAC,GACFA,WAAW,KAAK,OAAO,gBACnBxB,KAAA,CAAAC,aAAA,CAACuI,YAAY;IACT3J,qBAAqB,EAAEA,qBAAsB;IAC7CK,SAAS,EAAEA,SAAU;IACrBkC,YAAY,EAAEA,YAAa;IAC3BH,kBAAkB,EAAEA,kBAAmB;IACvCjC,kBAAkB,EAAEA,kBAAmB;IACvC0D,QAAQ,EAAEA,QAAS;IACnBxB,cAAc,EAAEA,cAAe;IAC/BF,GAAG,EAAEA,GAAI;IACTQ,WAAW,EAAEA;GAChB,CAAC,gBACFxB,KAAA,CAAAC,aAAA,CAACiK,QAAQ,MAAE,CAAC,gBAC1BlK,KAAA,CAAAC,aAAA,CAACmF,WAAW;IAAClG,SAAS,EAAEA;GAAY,CACzC,CACJ,CAAC,gBAAGc,KAAA,CAAAC,aAAA,CAACiK,QAAQ,MAAE,CAEvB,CAAC;AAEd;;;;"}